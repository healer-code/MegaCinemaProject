//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MegaCinemaData.MegaCinemaDBContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsdef12d830c8aaa83af15b35c7f2b643af09da3ebe955d5366ce93bd7fd50e5b5))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsdef12d830c8aaa83af15b35c7f2b643af09da3ebe955d5366ce93bd7fd50e5b5 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "def12d830c8aaa83af15b35c7f2b643af09da3ebe955d5366ce93bd7fd50e5b5"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.AccountType")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Customer")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.BookingTicket")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Film")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.AdsBanner")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.DetailCategory")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.FilmCategory")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.DetailFormat")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.FilmFormat")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.FilmRating")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.FilmSession")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.Cinema")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.FeatureDetail")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.CinemaFeature")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.PromotionCine")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.Promotion")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.Status")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.FilmCalendarCreate")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.Staff")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.Regency")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.FoodList")
            {
                return GetView20();
            }

            if (extentName == "CodeFirstDatabase.TicketCombo")
            {
                return GetView21();
            }

            if (extentName == "CodeFirstDatabase.RoomFilm")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.SeatMaintenance")
            {
                return GetView23();
            }

            if (extentName == "CodeFirstDatabase.SeatList")
            {
                return GetView24();
            }

            if (extentName == "CodeFirstDatabase.SeatType")
            {
                return GetView25();
            }

            if (extentName == "CodeFirstDatabase.TicketDetail")
            {
                return GetView26();
            }

            if (extentName == "CodeFirstDatabase.TicketCategory")
            {
                return GetView27();
            }

            if (extentName == "CodeFirstDatabase.TimeSession")
            {
                return GetView28();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView29();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView30();
            }

            if (extentName == "CodeFirstDatabase.ApplicationUser")
            {
                return GetView31();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView32();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView33();
            }

            if (extentName == "MegaCinemaDBContext.AccountTypes")
            {
                return GetView34();
            }

            if (extentName == "MegaCinemaDBContext.Customers")
            {
                return GetView35();
            }

            if (extentName == "MegaCinemaDBContext.BookingTickets")
            {
                return GetView36();
            }

            if (extentName == "MegaCinemaDBContext.Films")
            {
                return GetView37();
            }

            if (extentName == "MegaCinemaDBContext.AdsBanners")
            {
                return GetView38();
            }

            if (extentName == "MegaCinemaDBContext.DetailCategories")
            {
                return GetView39();
            }

            if (extentName == "MegaCinemaDBContext.FilmCategories")
            {
                return GetView40();
            }

            if (extentName == "MegaCinemaDBContext.DetailFormats")
            {
                return GetView41();
            }

            if (extentName == "MegaCinemaDBContext.FilmFormats")
            {
                return GetView42();
            }

            if (extentName == "MegaCinemaDBContext.FilmRatings")
            {
                return GetView43();
            }

            if (extentName == "MegaCinemaDBContext.FilmSessions")
            {
                return GetView44();
            }

            if (extentName == "MegaCinemaDBContext.Cinemas")
            {
                return GetView45();
            }

            if (extentName == "MegaCinemaDBContext.FeatureDetails")
            {
                return GetView46();
            }

            if (extentName == "MegaCinemaDBContext.CinemaFeatures")
            {
                return GetView47();
            }

            if (extentName == "MegaCinemaDBContext.PromotionCines")
            {
                return GetView48();
            }

            if (extentName == "MegaCinemaDBContext.Promotions")
            {
                return GetView49();
            }

            if (extentName == "MegaCinemaDBContext.Statuss")
            {
                return GetView50();
            }

            if (extentName == "MegaCinemaDBContext.FilmCalendarCreates")
            {
                return GetView51();
            }

            if (extentName == "MegaCinemaDBContext.Staffs")
            {
                return GetView52();
            }

            if (extentName == "MegaCinemaDBContext.Regencies")
            {
                return GetView53();
            }

            if (extentName == "MegaCinemaDBContext.FoodLists")
            {
                return GetView54();
            }

            if (extentName == "MegaCinemaDBContext.TicketCombos")
            {
                return GetView55();
            }

            if (extentName == "MegaCinemaDBContext.RoomFilms")
            {
                return GetView56();
            }

            if (extentName == "MegaCinemaDBContext.SeatMaintenances")
            {
                return GetView57();
            }

            if (extentName == "MegaCinemaDBContext.SeatLists")
            {
                return GetView58();
            }

            if (extentName == "MegaCinemaDBContext.SeatTypes")
            {
                return GetView59();
            }

            if (extentName == "MegaCinemaDBContext.TicketDetails")
            {
                return GetView60();
            }

            if (extentName == "MegaCinemaDBContext.TicketCategories")
            {
                return GetView61();
            }

            if (extentName == "MegaCinemaDBContext.TimeSessions")
            {
                return GetView62();
            }

            if (extentName == "MegaCinemaDBContext.Roles")
            {
                return GetView63();
            }

            if (extentName == "MegaCinemaDBContext.IdentityUserRoles")
            {
                return GetView64();
            }

            if (extentName == "MegaCinemaDBContext.IdentityRole_Users")
            {
                return GetView65();
            }

            if (extentName == "MegaCinemaDBContext.ApplicationUser_Roles")
            {
                return GetView66();
            }

            if (extentName == "MegaCinemaDBContext.Users")
            {
                return GetView67();
            }

            if (extentName == "MegaCinemaDBContext.ApplicationUser_Customer")
            {
                return GetView68();
            }

            if (extentName == "MegaCinemaDBContext.ApplicationUser_Staff")
            {
                return GetView69();
            }

            if (extentName == "MegaCinemaDBContext.IdentityUserClaims")
            {
                return GetView70();
            }

            if (extentName == "MegaCinemaDBContext.ApplicationUser_Claims")
            {
                return GetView71();
            }

            if (extentName == "MegaCinemaDBContext.IdentityUserLogins")
            {
                return GetView72();
            }

            if (extentName == "MegaCinemaDBContext.ApplicationUser_Logins")
            {
                return GetView73();
            }

            if (extentName == "CodeFirstDatabase.EventTopic")
            {
                return GetView74();
            }

            if (extentName == "MegaCinemaDBContext.EventTopics")
            {
                return GetView75();
            }

            if (extentName == "CodeFirstDatabase.Parameter")
            {
                return GetView76();
            }

            if (extentName == "MegaCinemaDBContext.Parameters")
            {
                return GetView77();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AccountType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountType
        [CodeFirstDatabaseSchema.AccountType](T1.AccountType_TypeID, T1.AccountType_TypeName, T1.AccountType_TypePoint, T1.AccountType_TypeDiscount, T1.AccountType_CreatedDate, T1.AccountType_CreatedBy, T1.AccountType_UpdatedDate, T1.AccountType_UpdatedBy, T1.AccountType_MetaKeyword, T1.AccountType_MetaDescription)
    FROM (
        SELECT 
            T.TypeID AS AccountType_TypeID, 
            T.TypeName AS AccountType_TypeName, 
            T.TypePoint AS AccountType_TypePoint, 
            T.TypeDiscount AS AccountType_TypeDiscount, 
            T.CreatedDate AS AccountType_CreatedDate, 
            T.CreatedBy AS AccountType_CreatedBy, 
            T.UpdatedDate AS AccountType_UpdatedDate, 
            T.UpdatedBy AS AccountType_UpdatedBy, 
            T.MetaKeyword AS AccountType_MetaKeyword, 
            T.MetaDescription AS AccountType_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.AccountTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customer
        [CodeFirstDatabaseSchema.Customer](T1.Customer_CustomerID, T1.Customer_CustomerPrefix, T1.Customer_CustomerCode, T1.Customer_CustomerPoint, T1.Customer_CustomerAvatar, T1.Customer_CustomerIP, T1.Customer_CustomerAccountType, T1.Customer_CustomerStatus, T1.Customer_CreatedDate, T1.Customer_CreatedBy, T1.Customer_UpdatedDate, T1.Customer_UpdatedBy, T1.Customer_MetaKeyword, T1.Customer_MetaDescription)
    FROM (
        SELECT 
            T.CustomerID AS Customer_CustomerID, 
            T.CustomerPrefix AS Customer_CustomerPrefix, 
            T.CustomerCode AS Customer_CustomerCode, 
            T.CustomerPoint AS Customer_CustomerPoint, 
            T.CustomerAvatar AS Customer_CustomerAvatar, 
            T.CustomerIP AS Customer_CustomerIP, 
            T.CustomerAccountType AS Customer_CustomerAccountType, 
            T.CustomerStatus AS Customer_CustomerStatus, 
            T.CreatedDate AS Customer_CreatedDate, 
            T.CreatedBy AS Customer_CreatedBy, 
            T.UpdatedDate AS Customer_UpdatedDate, 
            T.UpdatedBy AS Customer_UpdatedBy, 
            T.MetaKeyword AS Customer_MetaKeyword, 
            T.MetaDescription AS Customer_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.BookingTicket.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BookingTicket
        [CodeFirstDatabaseSchema.BookingTicket](T1.BookingTicket_BookingTicketID, T1.BookingTicket_BookingTicketPrefix, T1.BookingTicket_BookingTicketCode, T1.BookingTicket_BookingTicketFilmID, T1.BookingTicket_BookingTicketRoomID, T1.BookingTicket_BookingTicketTimeDetail, T1.BookingTicket_BookingTicketPrice, T1.BookingTicket_BookingPaymentDate, T1.BookingTicket_CustomerID, T1.BookingTicket_BookingTicketStatusID, T1.BookingTicket_CreatedDate, T1.BookingTicket_CreatedBy, T1.BookingTicket_UpdatedDate, T1.BookingTicket_UpdatedBy, T1.BookingTicket_MetaKeyword, T1.BookingTicket_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS BookingTicket_BookingTicketID, 
            T.BookingTicketPrefix AS BookingTicket_BookingTicketPrefix, 
            T.BookingTicketCode AS BookingTicket_BookingTicketCode, 
            T.BookingTicketFilmID AS BookingTicket_BookingTicketFilmID, 
            T.BookingTicketRoomID AS BookingTicket_BookingTicketRoomID, 
            T.BookingTicketTimeDetail AS BookingTicket_BookingTicketTimeDetail, 
            T.BookingTicketPrice AS BookingTicket_BookingTicketPrice, 
            T.BookingPaymentDate AS BookingTicket_BookingPaymentDate, 
            T.CustomerID AS BookingTicket_CustomerID, 
            T.BookingTicketStatusID AS BookingTicket_BookingTicketStatusID, 
            T.CreatedDate AS BookingTicket_CreatedDate, 
            T.CreatedBy AS BookingTicket_CreatedBy, 
            T.UpdatedDate AS BookingTicket_UpdatedDate, 
            T.UpdatedBy AS BookingTicket_UpdatedBy, 
            T.MetaKeyword AS BookingTicket_MetaKeyword, 
            T.MetaDescription AS BookingTicket_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.BookingTickets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Film.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Film
        [CodeFirstDatabaseSchema.Film](T1.Film_FilmID, T1.Film_FilmPrefix, T1.Film_FilmCode, T1.Film_FilmName, T1.Film_FilmDuration, T1.Film_FilmFirstPremiered, T1.Film_FilmLanguage, T1.Film_FilmContent, T1.Film_FilmFinishPremiered, T1.Film_FilmPoster, T1.Film_FilmCategories, T1.Film_FilmCompanyRelease, T1.Film_FilmTrailer, T1.Film_FilmRatingID, T1.Film_FilmStatus, T1.Film_CreatedDate, T1.Film_CreatedBy, T1.Film_UpdatedDate, T1.Film_UpdatedBy, T1.Film_MetaKeyword, T1.Film_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS Film_FilmID, 
            T.FilmPrefix AS Film_FilmPrefix, 
            T.FilmCode AS Film_FilmCode, 
            T.FilmName AS Film_FilmName, 
            T.FilmDuration AS Film_FilmDuration, 
            T.FilmFirstPremiered AS Film_FilmFirstPremiered, 
            T.FilmLanguage AS Film_FilmLanguage, 
            T.FilmContent AS Film_FilmContent, 
            T.FilmFinishPremiered AS Film_FilmFinishPremiered, 
            T.FilmPoster AS Film_FilmPoster, 
            T.FilmCategories AS Film_FilmCategories, 
            T.FilmCompanyRelease AS Film_FilmCompanyRelease, 
            T.FilmTrailer AS Film_FilmTrailer, 
            T.FilmRatingID AS Film_FilmRatingID, 
            T.FilmStatus AS Film_FilmStatus, 
            T.CreatedDate AS Film_CreatedDate, 
            T.CreatedBy AS Film_CreatedBy, 
            T.UpdatedDate AS Film_UpdatedDate, 
            T.UpdatedBy AS Film_UpdatedBy, 
            T.MetaKeyword AS Film_MetaKeyword, 
            T.MetaDescription AS Film_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Films AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AdsBanner.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdsBanner
        [CodeFirstDatabaseSchema.AdsBanner](T1.AdsBanner_AdsId, T1.AdsBanner_FilmId, T1.AdsBanner_AdsDescription, T1.AdsBanner_CreatedDate, T1.AdsBanner_CreatedBy, T1.AdsBanner_UpdatedDate, T1.AdsBanner_UpdatedBy, T1.AdsBanner_MetaKeyword, T1.AdsBanner_MetaDescription)
    FROM (
        SELECT 
            T.AdsId AS AdsBanner_AdsId, 
            T.FilmId AS AdsBanner_FilmId, 
            T.AdsDescription AS AdsBanner_AdsDescription, 
            T.CreatedDate AS AdsBanner_CreatedDate, 
            T.CreatedBy AS AdsBanner_CreatedBy, 
            T.UpdatedDate AS AdsBanner_UpdatedDate, 
            T.UpdatedBy AS AdsBanner_UpdatedBy, 
            T.MetaKeyword AS AdsBanner_MetaKeyword, 
            T.MetaDescription AS AdsBanner_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.AdsBanners AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DetailCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetailCategory
        [CodeFirstDatabaseSchema.DetailCategory](T1.DetailCategory_FilmID, T1.DetailCategory_FilmCategoryID, T1.DetailCategory_Description, T1.DetailCategory_CreatedDate, T1.DetailCategory_CreatedBy, T1.DetailCategory_UpdatedDate, T1.DetailCategory_UpdatedBy, T1.DetailCategory_MetaKeyword, T1.DetailCategory_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS DetailCategory_FilmID, 
            T.FilmCategoryID AS DetailCategory_FilmCategoryID, 
            T.Description AS DetailCategory_Description, 
            T.CreatedDate AS DetailCategory_CreatedDate, 
            T.CreatedBy AS DetailCategory_CreatedBy, 
            T.UpdatedDate AS DetailCategory_UpdatedDate, 
            T.UpdatedBy AS DetailCategory_UpdatedBy, 
            T.MetaKeyword AS DetailCategory_MetaKeyword, 
            T.MetaDescription AS DetailCategory_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.DetailCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FilmCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmCategory
        [CodeFirstDatabaseSchema.FilmCategory](T1.FilmCategory_FilmCategoryID, T1.FilmCategory_FilmCategoryName, T1.FilmCategory_FilmCategoryDescrip, T1.FilmCategory_CreatedDate, T1.FilmCategory_CreatedBy, T1.FilmCategory_UpdatedDate, T1.FilmCategory_UpdatedBy, T1.FilmCategory_MetaKeyword, T1.FilmCategory_MetaDescription)
    FROM (
        SELECT 
            T.FilmCategoryID AS FilmCategory_FilmCategoryID, 
            T.FilmCategoryName AS FilmCategory_FilmCategoryName, 
            T.FilmCategoryDescrip AS FilmCategory_FilmCategoryDescrip, 
            T.CreatedDate AS FilmCategory_CreatedDate, 
            T.CreatedBy AS FilmCategory_CreatedBy, 
            T.UpdatedDate AS FilmCategory_UpdatedDate, 
            T.UpdatedBy AS FilmCategory_UpdatedBy, 
            T.MetaKeyword AS FilmCategory_MetaKeyword, 
            T.MetaDescription AS FilmCategory_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FilmCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DetailFormat.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetailFormat
        [CodeFirstDatabaseSchema.DetailFormat](T1.DetailFormat_FilmID, T1.DetailFormat_FilmFormatID, T1.DetailFormat_Description, T1.DetailFormat_CreatedDate, T1.DetailFormat_CreatedBy, T1.DetailFormat_UpdatedDate, T1.DetailFormat_UpdatedBy, T1.DetailFormat_MetaKeyword, T1.DetailFormat_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS DetailFormat_FilmID, 
            T.FilmFormatID AS DetailFormat_FilmFormatID, 
            T.Description AS DetailFormat_Description, 
            T.CreatedDate AS DetailFormat_CreatedDate, 
            T.CreatedBy AS DetailFormat_CreatedBy, 
            T.UpdatedDate AS DetailFormat_UpdatedDate, 
            T.UpdatedBy AS DetailFormat_UpdatedBy, 
            T.MetaKeyword AS DetailFormat_MetaKeyword, 
            T.MetaDescription AS DetailFormat_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.DetailFormats AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FilmFormat.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmFormat
        [CodeFirstDatabaseSchema.FilmFormat](T1.FilmFormat_FilmFormatID, T1.FilmFormat_FilmFormatName, T1.FilmFormat_FilmFormatDescrip, T1.FilmFormat_CreatedDate, T1.FilmFormat_CreatedBy, T1.FilmFormat_UpdatedDate, T1.FilmFormat_UpdatedBy, T1.FilmFormat_MetaKeyword, T1.FilmFormat_MetaDescription)
    FROM (
        SELECT 
            T.FilmFormatID AS FilmFormat_FilmFormatID, 
            T.FilmFormatName AS FilmFormat_FilmFormatName, 
            T.FilmFormatDescrip AS FilmFormat_FilmFormatDescrip, 
            T.CreatedDate AS FilmFormat_CreatedDate, 
            T.CreatedBy AS FilmFormat_CreatedBy, 
            T.UpdatedDate AS FilmFormat_UpdatedDate, 
            T.UpdatedBy AS FilmFormat_UpdatedBy, 
            T.MetaKeyword AS FilmFormat_MetaKeyword, 
            T.MetaDescription AS FilmFormat_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FilmFormats AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FilmRating.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmRating
        [CodeFirstDatabaseSchema.FilmRating](T1.FilmRating_RatingID, T1.FilmRating_RatingName, T1.FilmRating_RatingDescription, T1.FilmRating_CreatedDate, T1.FilmRating_CreatedBy, T1.FilmRating_UpdatedDate, T1.FilmRating_UpdatedBy, T1.FilmRating_MetaKeyword, T1.FilmRating_MetaDescription)
    FROM (
        SELECT 
            T.RatingID AS FilmRating_RatingID, 
            T.RatingName AS FilmRating_RatingName, 
            T.RatingDescription AS FilmRating_RatingDescription, 
            T.CreatedDate AS FilmRating_CreatedDate, 
            T.CreatedBy AS FilmRating_CreatedBy, 
            T.UpdatedDate AS FilmRating_UpdatedDate, 
            T.UpdatedBy AS FilmRating_UpdatedBy, 
            T.MetaKeyword AS FilmRating_MetaKeyword, 
            T.MetaDescription AS FilmRating_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FilmRatings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FilmSession.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmSession
        [CodeFirstDatabaseSchema.FilmSession](T1.FilmSession_FilmSessionID, T1.FilmSession_FilmID, T1.FilmSession_CinemaID, T1.FilmSession_DateStartSession, T1.FilmSession_DateFinishSession, T1.FilmSession_AssignDescription, T1.FilmSession_StaffID, T1.FilmSession_FilmSessionStatusID, T1.FilmSession_CreatedDate, T1.FilmSession_CreatedBy, T1.FilmSession_UpdatedDate, T1.FilmSession_UpdatedBy, T1.FilmSession_MetaKeyword, T1.FilmSession_MetaDescription)
    FROM (
        SELECT 
            T.FilmSessionID AS FilmSession_FilmSessionID, 
            T.FilmID AS FilmSession_FilmID, 
            T.CinemaID AS FilmSession_CinemaID, 
            T.DateStartSession AS FilmSession_DateStartSession, 
            T.DateFinishSession AS FilmSession_DateFinishSession, 
            T.AssignDescription AS FilmSession_AssignDescription, 
            T.StaffID AS FilmSession_StaffID, 
            T.FilmSessionStatusID AS FilmSession_FilmSessionStatusID, 
            T.CreatedDate AS FilmSession_CreatedDate, 
            T.CreatedBy AS FilmSession_CreatedBy, 
            T.UpdatedDate AS FilmSession_UpdatedDate, 
            T.UpdatedBy AS FilmSession_UpdatedBy, 
            T.MetaKeyword AS FilmSession_MetaKeyword, 
            T.MetaDescription AS FilmSession_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FilmSessions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cinema.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cinema
        [CodeFirstDatabaseSchema.Cinema](T1.Cinema_CinemaID, T1.Cinema_CinemaPrefix, T1.Cinema_CinemaCode, T1.Cinema_CinemaFullName, T1.Cinema_CinemaAddress, T1.Cinema_CinemaPhone, T1.Cinema_CinemaEmail, T1.Cinema_CinemaManagerID, T1.Cinema_CinemaStatus, T1.Cinema_CreatedDate, T1.Cinema_CreatedBy, T1.Cinema_UpdatedDate, T1.Cinema_UpdatedBy, T1.Cinema_MetaKeyword, T1.Cinema_MetaDescription)
    FROM (
        SELECT 
            T.CinemaID AS Cinema_CinemaID, 
            T.CinemaPrefix AS Cinema_CinemaPrefix, 
            T.CinemaCode AS Cinema_CinemaCode, 
            T.CinemaFullName AS Cinema_CinemaFullName, 
            T.CinemaAddress AS Cinema_CinemaAddress, 
            T.CinemaPhone AS Cinema_CinemaPhone, 
            T.CinemaEmail AS Cinema_CinemaEmail, 
            T.CinemaManagerID AS Cinema_CinemaManagerID, 
            T.CinemaStatus AS Cinema_CinemaStatus, 
            T.CreatedDate AS Cinema_CreatedDate, 
            T.CreatedBy AS Cinema_CreatedBy, 
            T.UpdatedDate AS Cinema_UpdatedDate, 
            T.UpdatedBy AS Cinema_UpdatedBy, 
            T.MetaKeyword AS Cinema_MetaKeyword, 
            T.MetaDescription AS Cinema_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Cinemas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FeatureDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FeatureDetail
        [CodeFirstDatabaseSchema.FeatureDetail](T1.FeatureDetail_FeatureID, T1.FeatureDetail_CinemaID, T1.FeatureDetail_Description, T1.FeatureDetail_CreatedDate, T1.FeatureDetail_CreatedBy, T1.FeatureDetail_UpdatedDate, T1.FeatureDetail_UpdatedBy, T1.FeatureDetail_MetaKeyword, T1.FeatureDetail_MetaDescription)
    FROM (
        SELECT 
            T.FeatureID AS FeatureDetail_FeatureID, 
            T.CinemaID AS FeatureDetail_CinemaID, 
            T.Description AS FeatureDetail_Description, 
            T.CreatedDate AS FeatureDetail_CreatedDate, 
            T.CreatedBy AS FeatureDetail_CreatedBy, 
            T.UpdatedDate AS FeatureDetail_UpdatedDate, 
            T.UpdatedBy AS FeatureDetail_UpdatedBy, 
            T.MetaKeyword AS FeatureDetail_MetaKeyword, 
            T.MetaDescription AS FeatureDetail_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FeatureDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CinemaFeature.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CinemaFeature
        [CodeFirstDatabaseSchema.CinemaFeature](T1.CinemaFeature_FeatureID, T1.CinemaFeature_FeatureType, T1.CinemaFeature_FeatureContent, T1.CinemaFeature_FeatureDescription, T1.CinemaFeature_CreatedDate, T1.CinemaFeature_CreatedBy, T1.CinemaFeature_UpdatedDate, T1.CinemaFeature_UpdatedBy, T1.CinemaFeature_MetaKeyword, T1.CinemaFeature_MetaDescription)
    FROM (
        SELECT 
            T.FeatureID AS CinemaFeature_FeatureID, 
            T.FeatureType AS CinemaFeature_FeatureType, 
            T.FeatureContent AS CinemaFeature_FeatureContent, 
            T.FeatureDescription AS CinemaFeature_FeatureDescription, 
            T.CreatedDate AS CinemaFeature_CreatedDate, 
            T.CreatedBy AS CinemaFeature_CreatedBy, 
            T.UpdatedDate AS CinemaFeature_UpdatedDate, 
            T.UpdatedBy AS CinemaFeature_UpdatedBy, 
            T.MetaKeyword AS CinemaFeature_MetaKeyword, 
            T.MetaDescription AS CinemaFeature_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.CinemaFeatures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PromotionCine.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PromotionCine
        [CodeFirstDatabaseSchema.PromotionCine](T1.PromotionCine_PromotionID, T1.PromotionCine_CinemaID, T1.PromotionCine_Description, T1.PromotionCine_PromotionCineStatusID, T1.PromotionCine_CreatedDate, T1.PromotionCine_CreatedBy, T1.PromotionCine_UpdatedDate, T1.PromotionCine_UpdatedBy, T1.PromotionCine_MetaKeyword, T1.PromotionCine_MetaDescription)
    FROM (
        SELECT 
            T.PromotionID AS PromotionCine_PromotionID, 
            T.CinemaID AS PromotionCine_CinemaID, 
            T.Description AS PromotionCine_Description, 
            T.PromotionCineStatusID AS PromotionCine_PromotionCineStatusID, 
            T.CreatedDate AS PromotionCine_CreatedDate, 
            T.CreatedBy AS PromotionCine_CreatedBy, 
            T.UpdatedDate AS PromotionCine_UpdatedDate, 
            T.UpdatedBy AS PromotionCine_UpdatedBy, 
            T.MetaKeyword AS PromotionCine_MetaKeyword, 
            T.MetaDescription AS PromotionCine_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.PromotionCines AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Promotion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Promotion
        [CodeFirstDatabaseSchema.Promotion](T1.Promotion_PromotionID, T1.Promotion_PromotionHeader, T1.Promotion_PromotionContent, T1.Promotion_PromotionPoster, T1.Promotion_PromotionDateStart, T1.Promotion_PromotionDateFinish, T1.Promotion_PromotionStatusID, T1.Promotion_CreatedDate, T1.Promotion_CreatedBy, T1.Promotion_UpdatedDate, T1.Promotion_UpdatedBy, T1.Promotion_MetaKeyword, T1.Promotion_MetaDescription)
    FROM (
        SELECT 
            T.PromotionID AS Promotion_PromotionID, 
            T.PromotionHeader AS Promotion_PromotionHeader, 
            T.PromotionContent AS Promotion_PromotionContent, 
            T.PromotionPoster AS Promotion_PromotionPoster, 
            T.PromotionDateStart AS Promotion_PromotionDateStart, 
            T.PromotionDateFinish AS Promotion_PromotionDateFinish, 
            T.PromotionStatusID AS Promotion_PromotionStatusID, 
            T.CreatedDate AS Promotion_CreatedDate, 
            T.CreatedBy AS Promotion_CreatedBy, 
            T.UpdatedDate AS Promotion_UpdatedDate, 
            T.UpdatedBy AS Promotion_UpdatedBy, 
            T.MetaKeyword AS Promotion_MetaKeyword, 
            T.MetaDescription AS Promotion_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Promotions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Status.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Status
        [CodeFirstDatabaseSchema.Status](T1.Status_StatusID, T1.Status_StatusName, T1.Status_StatusDescription, T1.Status_CreatedDate, T1.Status_CreatedBy, T1.Status_UpdatedDate, T1.Status_UpdatedBy, T1.Status_MetaKeyword, T1.Status_MetaDescription)
    FROM (
        SELECT 
            T.StatusID AS Status_StatusID, 
            T.StatusName AS Status_StatusName, 
            T.StatusDescription AS Status_StatusDescription, 
            T.CreatedDate AS Status_CreatedDate, 
            T.CreatedBy AS Status_CreatedBy, 
            T.UpdatedDate AS Status_UpdatedDate, 
            T.UpdatedBy AS Status_UpdatedBy, 
            T.MetaKeyword AS Status_MetaKeyword, 
            T.MetaDescription AS Status_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Statuss AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FilmCalendarCreate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmCalendarCreate
        [CodeFirstDatabaseSchema.FilmCalendarCreate](T1.FilmCalendarCreate_FilmCalendarCreateID, T1.FilmCalendarCreate_FilmSessionID, T1.FilmCalendarCreate_StaffID, T1.FilmCalendarCreate_FilmCalendarContent, T1.FilmCalendarCreate_FilmCalendarDescription, T1.FilmCalendarCreate_StatusID, T1.FilmCalendarCreate_CreatedDate, T1.FilmCalendarCreate_CreatedBy, T1.FilmCalendarCreate_UpdatedDate, T1.FilmCalendarCreate_UpdatedBy, T1.FilmCalendarCreate_MetaKeyword, T1.FilmCalendarCreate_MetaDescription)
    FROM (
        SELECT 
            T.FilmCalendarCreateID AS FilmCalendarCreate_FilmCalendarCreateID, 
            T.FilmSessionID AS FilmCalendarCreate_FilmSessionID, 
            T.StaffID AS FilmCalendarCreate_StaffID, 
            T.FilmCalendarContent AS FilmCalendarCreate_FilmCalendarContent, 
            T.FilmCalendarDescription AS FilmCalendarCreate_FilmCalendarDescription, 
            T.StatusID AS FilmCalendarCreate_StatusID, 
            T.CreatedDate AS FilmCalendarCreate_CreatedDate, 
            T.CreatedBy AS FilmCalendarCreate_CreatedBy, 
            T.UpdatedDate AS FilmCalendarCreate_UpdatedDate, 
            T.UpdatedBy AS FilmCalendarCreate_UpdatedBy, 
            T.MetaKeyword AS FilmCalendarCreate_MetaKeyword, 
            T.MetaDescription AS FilmCalendarCreate_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FilmCalendarCreates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Staff.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Staff
        [CodeFirstDatabaseSchema.Staff](T1.Staff_StaffID, T1.Staff_StaffPrefix, T1.Staff_StaffCode, T1.Staff_StaffRegencyID, T1.Staff_StaffStatus, T1.Staff_CreatedDate, T1.Staff_CreatedBy, T1.Staff_UpdatedDate, T1.Staff_UpdatedBy, T1.Staff_MetaKeyword, T1.Staff_MetaDescription)
    FROM (
        SELECT 
            T.StaffID AS Staff_StaffID, 
            T.StaffPrefix AS Staff_StaffPrefix, 
            T.StaffCode AS Staff_StaffCode, 
            T.StaffRegencyID AS Staff_StaffRegencyID, 
            T.StaffStatus AS Staff_StaffStatus, 
            T.CreatedDate AS Staff_CreatedDate, 
            T.CreatedBy AS Staff_CreatedBy, 
            T.UpdatedDate AS Staff_UpdatedDate, 
            T.UpdatedBy AS Staff_UpdatedBy, 
            T.MetaKeyword AS Staff_MetaKeyword, 
            T.MetaDescription AS Staff_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Staffs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Regency.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Regency
        [CodeFirstDatabaseSchema.Regency](T1.Regency_RegencyID, T1.Regency_RegencyName, T1.Regency_CreatedDate, T1.Regency_CreatedBy, T1.Regency_UpdatedDate, T1.Regency_UpdatedBy, T1.Regency_MetaKeyword, T1.Regency_MetaDescription)
    FROM (
        SELECT 
            T.RegencyID AS Regency_RegencyID, 
            T.RegencyName AS Regency_RegencyName, 
            T.CreatedDate AS Regency_CreatedDate, 
            T.CreatedBy AS Regency_CreatedBy, 
            T.UpdatedDate AS Regency_UpdatedDate, 
            T.UpdatedBy AS Regency_UpdatedBy, 
            T.MetaKeyword AS Regency_MetaKeyword, 
            T.MetaDescription AS Regency_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Regencies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FoodList.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FoodList
        [CodeFirstDatabaseSchema.FoodList](T1.FoodList_FoodID, T1.FoodList_FoodPrefix, T1.FoodList_FoodCode, T1.FoodList_FoodName, T1.FoodList_FoodPrice, T1.FoodList_FoodDescription, T1.FoodList_FoodPoster, T1.FoodList_FoodStatus, T1.FoodList_CreatedDate, T1.FoodList_CreatedBy, T1.FoodList_UpdatedDate, T1.FoodList_UpdatedBy, T1.FoodList_MetaKeyword, T1.FoodList_MetaDescription)
    FROM (
        SELECT 
            T.FoodID AS FoodList_FoodID, 
            T.FoodPrefix AS FoodList_FoodPrefix, 
            T.FoodCode AS FoodList_FoodCode, 
            T.FoodName AS FoodList_FoodName, 
            T.FoodPrice AS FoodList_FoodPrice, 
            T.FoodDescription AS FoodList_FoodDescription, 
            T.FoodPoster AS FoodList_FoodPoster, 
            T.FoodStatus AS FoodList_FoodStatus, 
            T.CreatedDate AS FoodList_CreatedDate, 
            T.CreatedBy AS FoodList_CreatedBy, 
            T.UpdatedDate AS FoodList_UpdatedDate, 
            T.UpdatedBy AS FoodList_UpdatedBy, 
            T.MetaKeyword AS FoodList_MetaKeyword, 
            T.MetaDescription AS FoodList_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.FoodLists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TicketCombo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketCombo
        [CodeFirstDatabaseSchema.TicketCombo](T1.TicketCombo_BookingTicketID, T1.TicketCombo_FoodListID, T1.TicketCombo_FoodQuantity, T1.TicketCombo_FoodPrice, T1.TicketCombo_FoodDiscount, T1.TicketCombo_FoodTotalPrice, T1.TicketCombo_FoodStatusID, T1.TicketCombo_CreatedDate, T1.TicketCombo_CreatedBy, T1.TicketCombo_UpdatedDate, T1.TicketCombo_UpdatedBy, T1.TicketCombo_MetaKeyword, T1.TicketCombo_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS TicketCombo_BookingTicketID, 
            T.FoodListID AS TicketCombo_FoodListID, 
            T.FoodQuantity AS TicketCombo_FoodQuantity, 
            T.FoodPrice AS TicketCombo_FoodPrice, 
            T.FoodDiscount AS TicketCombo_FoodDiscount, 
            T.FoodTotalPrice AS TicketCombo_FoodTotalPrice, 
            T.FoodStatusID AS TicketCombo_FoodStatusID, 
            T.CreatedDate AS TicketCombo_CreatedDate, 
            T.CreatedBy AS TicketCombo_CreatedBy, 
            T.UpdatedDate AS TicketCombo_UpdatedDate, 
            T.UpdatedBy AS TicketCombo_UpdatedBy, 
            T.MetaKeyword AS TicketCombo_MetaKeyword, 
            T.MetaDescription AS TicketCombo_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.TicketCombos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RoomFilm.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoomFilm
        [CodeFirstDatabaseSchema.RoomFilm](T1.RoomFilm_RoomID, T1.RoomFilm_RoomPrefix, T1.RoomFilm_RoomCode, T1.RoomFilm_RoomName, T1.RoomFilm_RoomSeatPosition, T1.RoomFilm_RoomCinemaDescription, T1.RoomFilm_RoomPoster, T1.RoomFilm_RoomCinemaID, T1.RoomFilm_RoomStatusID, T1.RoomFilm_CreatedDate, T1.RoomFilm_CreatedBy, T1.RoomFilm_UpdatedDate, T1.RoomFilm_UpdatedBy, T1.RoomFilm_MetaKeyword, T1.RoomFilm_MetaDescription)
    FROM (
        SELECT 
            T.RoomID AS RoomFilm_RoomID, 
            T.RoomPrefix AS RoomFilm_RoomPrefix, 
            T.RoomCode AS RoomFilm_RoomCode, 
            T.RoomName AS RoomFilm_RoomName, 
            T.RoomSeatPosition AS RoomFilm_RoomSeatPosition, 
            T.RoomCinemaDescription AS RoomFilm_RoomCinemaDescription, 
            T.RoomPoster AS RoomFilm_RoomPoster, 
            T.RoomCinemaID AS RoomFilm_RoomCinemaID, 
            T.RoomStatusID AS RoomFilm_RoomStatusID, 
            T.CreatedDate AS RoomFilm_CreatedDate, 
            T.CreatedBy AS RoomFilm_CreatedBy, 
            T.UpdatedDate AS RoomFilm_UpdatedDate, 
            T.UpdatedBy AS RoomFilm_UpdatedBy, 
            T.MetaKeyword AS RoomFilm_MetaKeyword, 
            T.MetaDescription AS RoomFilm_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.RoomFilms AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SeatMaintenance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatMaintenance
        [CodeFirstDatabaseSchema.SeatMaintenance](T1.SeatMaintenance_ID, T1.SeatMaintenance_SeatID, T1.SeatMaintenance_RoomID, T1.SeatMaintenance_Description, T1.SeatMaintenance_SeatStatusID, T1.SeatMaintenance_CreatedDate, T1.SeatMaintenance_CreatedBy, T1.SeatMaintenance_UpdatedDate, T1.SeatMaintenance_UpdatedBy, T1.SeatMaintenance_MetaKeyword, T1.SeatMaintenance_MetaDescription)
    FROM (
        SELECT 
            T.ID AS SeatMaintenance_ID, 
            T.SeatID AS SeatMaintenance_SeatID, 
            T.RoomID AS SeatMaintenance_RoomID, 
            T.Description AS SeatMaintenance_Description, 
            T.SeatStatusID AS SeatMaintenance_SeatStatusID, 
            T.CreatedDate AS SeatMaintenance_CreatedDate, 
            T.CreatedBy AS SeatMaintenance_CreatedBy, 
            T.UpdatedDate AS SeatMaintenance_UpdatedDate, 
            T.UpdatedBy AS SeatMaintenance_UpdatedBy, 
            T.MetaKeyword AS SeatMaintenance_MetaKeyword, 
            T.MetaDescription AS SeatMaintenance_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.SeatMaintenances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SeatList.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatList
        [CodeFirstDatabaseSchema.SeatList](T1.SeatList_SeatID, T1.SeatList_SeatTypeID, T1.SeatList_SeatPrefix, T1.SeatList_SeatCode, T1.SeatList_SeatName, T1.SeatList_SeatCoupleTwoID, T1.SeatList_SeatRoomID, T1.SeatList_SeatRow, T1.SeatList_SeatColumn, T1.SeatList_SeatStatusID, T1.SeatList_CreatedDate, T1.SeatList_CreatedBy, T1.SeatList_UpdatedDate, T1.SeatList_UpdatedBy, T1.SeatList_MetaKeyword, T1.SeatList_MetaDescription)
    FROM (
        SELECT 
            T.SeatID AS SeatList_SeatID, 
            T.SeatTypeID AS SeatList_SeatTypeID, 
            T.SeatPrefix AS SeatList_SeatPrefix, 
            T.SeatCode AS SeatList_SeatCode, 
            T.SeatName AS SeatList_SeatName, 
            T.SeatCoupleTwoID AS SeatList_SeatCoupleTwoID, 
            T.SeatRoomID AS SeatList_SeatRoomID, 
            T.SeatRow AS SeatList_SeatRow, 
            T.SeatColumn AS SeatList_SeatColumn, 
            T.SeatStatusID AS SeatList_SeatStatusID, 
            T.CreatedDate AS SeatList_CreatedDate, 
            T.CreatedBy AS SeatList_CreatedBy, 
            T.UpdatedDate AS SeatList_UpdatedDate, 
            T.UpdatedBy AS SeatList_UpdatedBy, 
            T.MetaKeyword AS SeatList_MetaKeyword, 
            T.MetaDescription AS SeatList_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.SeatLists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SeatType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatType
        [CodeFirstDatabaseSchema.SeatType](T1.SeatType_SeatTypeID, T1.SeatType_SeatTypeName, T1.SeatType_SeatTypeSurcharge, T1.SeatType_SeatTypeStatus, T1.SeatType_CreatedDate, T1.SeatType_CreatedBy, T1.SeatType_UpdatedDate, T1.SeatType_UpdatedBy, T1.SeatType_MetaKeyword, T1.SeatType_MetaDescription)
    FROM (
        SELECT 
            T.SeatTypeID AS SeatType_SeatTypeID, 
            T.SeatTypeName AS SeatType_SeatTypeName, 
            T.SeatTypeSurcharge AS SeatType_SeatTypeSurcharge, 
            T.SeatTypeStatus AS SeatType_SeatTypeStatus, 
            T.CreatedDate AS SeatType_CreatedDate, 
            T.CreatedBy AS SeatType_CreatedBy, 
            T.UpdatedDate AS SeatType_UpdatedDate, 
            T.UpdatedBy AS SeatType_UpdatedBy, 
            T.MetaKeyword AS SeatType_MetaKeyword, 
            T.MetaDescription AS SeatType_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.SeatTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TicketDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketDetail
        [CodeFirstDatabaseSchema.TicketDetail](T1.TicketDetail_BookingTicketID, T1.TicketDetail_SeatName, T1.TicketDetail_SeatTypeID, T1.TicketDetail_SeatPrice, T1.TicketDetail_TicketCategoryID, T1.TicketDetail_SeatDiscount, T1.TicketDetail_TotalPrice, T1.TicketDetail_TicketStatusID, T1.TicketDetail_CreatedDate, T1.TicketDetail_CreatedBy, T1.TicketDetail_UpdatedDate, T1.TicketDetail_UpdatedBy, T1.TicketDetail_MetaKeyword, T1.TicketDetail_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS TicketDetail_BookingTicketID, 
            T.SeatName AS TicketDetail_SeatName, 
            T.SeatTypeID AS TicketDetail_SeatTypeID, 
            T.SeatPrice AS TicketDetail_SeatPrice, 
            T.TicketCategoryID AS TicketDetail_TicketCategoryID, 
            T.SeatDiscount AS TicketDetail_SeatDiscount, 
            T.TotalPrice AS TicketDetail_TotalPrice, 
            T.TicketStatusID AS TicketDetail_TicketStatusID, 
            T.CreatedDate AS TicketDetail_CreatedDate, 
            T.CreatedBy AS TicketDetail_CreatedBy, 
            T.UpdatedDate AS TicketDetail_UpdatedDate, 
            T.UpdatedBy AS TicketDetail_UpdatedBy, 
            T.MetaKeyword AS TicketDetail_MetaKeyword, 
            T.MetaDescription AS TicketDetail_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.TicketDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TicketCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketCategory
        [CodeFirstDatabaseSchema.TicketCategory](T1.TicketCategory_TicketCateID, T1.TicketCategory_TicketCateName, T1.TicketCategory_TicketCatePrice, T1.TicketCategory_TicketCateStatusID, T1.TicketCategory_CreatedDate, T1.TicketCategory_CreatedBy, T1.TicketCategory_UpdatedDate, T1.TicketCategory_UpdatedBy, T1.TicketCategory_MetaKeyword, T1.TicketCategory_MetaDescription)
    FROM (
        SELECT 
            T.TicketCateID AS TicketCategory_TicketCateID, 
            T.TicketCateName AS TicketCategory_TicketCateName, 
            T.TicketCatePrice AS TicketCategory_TicketCatePrice, 
            T.TicketCateStatusID AS TicketCategory_TicketCateStatusID, 
            T.CreatedDate AS TicketCategory_CreatedDate, 
            T.CreatedBy AS TicketCategory_CreatedBy, 
            T.UpdatedDate AS TicketCategory_UpdatedDate, 
            T.UpdatedBy AS TicketCategory_UpdatedBy, 
            T.MetaKeyword AS TicketCategory_MetaKeyword, 
            T.MetaDescription AS TicketCategory_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.TicketCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TimeSession.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TimeSession
        [CodeFirstDatabaseSchema.TimeSession](T1.TimeSession_TimeSessionID, T1.TimeSession_TimeDetail, T1.TimeSession_TimeStatus, T1.TimeSession_CreatedDate, T1.TimeSession_CreatedBy, T1.TimeSession_UpdatedDate, T1.TimeSession_UpdatedBy, T1.TimeSession_MetaKeyword, T1.TimeSession_MetaDescription)
    FROM (
        SELECT 
            T.TimeSessionID AS TimeSession_TimeSessionID, 
            T.TimeDetail AS TimeSession_TimeDetail, 
            T.TimeStatus AS TimeSession_TimeStatus, 
            T.CreatedDate AS TimeSession_CreatedDate, 
            T.CreatedBy AS TimeSession_CreatedBy, 
            T.UpdatedDate AS TimeSession_UpdatedDate, 
            T.UpdatedBy AS TimeSession_UpdatedBy, 
            T.MetaKeyword AS TimeSession_MetaKeyword, 
            T.MetaDescription AS TimeSession_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.TimeSessions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM MegaCinemaDBContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T4.IdentityUserRole_UserId, T4.IdentityUserRole_RoleId, T4.[IdentityUserRole.IdentityRole_Id], T4.[IdentityUserRole.ApplicationUser_Id])
    FROM (
        SELECT T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId, T3.[IdentityUserRole.IdentityRole_Id], T2.[IdentityUserRole.ApplicationUser_Id], (T3._from0 AND T3._from0 IS NOT NULL) AS _from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, T1._from2
        FROM  (
            SELECT 
                T.UserId AS IdentityUserRole_UserId, 
                T.RoleId AS IdentityUserRole_RoleId, 
                True AS _from2
            FROM MegaCinemaDBContext.IdentityUserRoles AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Roles_Target).UserId AS IdentityUserRole_UserId, 
                Key(T.ApplicationUser_Roles_Target).RoleId AS IdentityUserRole_RoleId, 
                Key(T.ApplicationUser_Roles_Source).Id AS [IdentityUserRole.ApplicationUser_Id], 
                True AS _from1
            FROM MegaCinemaDBContext.ApplicationUser_Roles AS T) AS T2
            ON T1.IdentityUserRole_UserId = T2.IdentityUserRole_UserId AND T1.IdentityUserRole_RoleId = T2.IdentityUserRole_RoleId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityRole_Users_Target).UserId AS IdentityUserRole_UserId, 
                Key(T.IdentityRole_Users_Target).RoleId AS IdentityUserRole_RoleId, 
                Key(T.IdentityRole_Users_Source).Id AS [IdentityUserRole.IdentityRole_Id], 
                True AS _from0
            FROM MegaCinemaDBContext.IdentityRole_Users AS T) AS T3
            ON T1.IdentityUserRole_UserId = T3.IdentityUserRole_UserId AND T1.IdentityUserRole_RoleId = T3.IdentityUserRole_RoleId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ApplicationUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser
        [CodeFirstDatabaseSchema.ApplicationUser](T4.ApplicationUser_Id, T4.ApplicationUser_FirstName, T4.ApplicationUser_LastName, T4.ApplicationUser_Birthday, T4.ApplicationUser_Sex, T4.ApplicationUser_SSN, T4.ApplicationUser_Address, T4.ApplicationUser_District, T4.ApplicationUser_City, T4.ApplicationUser_Avatar, T4.ApplicationUser_Email, T4.ApplicationUser_EmailConfirmed, T4.ApplicationUser_PasswordHash, T4.ApplicationUser_SecurityStamp, T4.ApplicationUser_PhoneNumber, T4.ApplicationUser_PhoneNumberConfirmed, T4.ApplicationUser_TwoFactorEnabled, T4.ApplicationUser_LockoutEndDateUtc, T4.ApplicationUser_LockoutEnabled, T4.ApplicationUser_AccessFailedCount, T4.ApplicationUser_UserName, T4.[ApplicationUser.Customer_CustomerID], T4.[ApplicationUser.Staff_StaffID])
    FROM (
        SELECT T1.ApplicationUser_Id, T1.ApplicationUser_FirstName, T1.ApplicationUser_LastName, T1.ApplicationUser_Birthday, T1.ApplicationUser_Sex, T1.ApplicationUser_SSN, T1.ApplicationUser_Address, T1.ApplicationUser_District, T1.ApplicationUser_City, T1.ApplicationUser_Avatar, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName, T2.[ApplicationUser.Customer_CustomerID], T3.[ApplicationUser.Staff_StaffID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Id AS ApplicationUser_Id, 
                T.FirstName AS ApplicationUser_FirstName, 
                T.LastName AS ApplicationUser_LastName, 
                T.Birthday AS ApplicationUser_Birthday, 
                T.Sex AS ApplicationUser_Sex, 
                T.SSN AS ApplicationUser_SSN, 
                T.Address AS ApplicationUser_Address, 
                T.District AS ApplicationUser_District, 
                T.City AS ApplicationUser_City, 
                T.Avatar AS ApplicationUser_Avatar, 
                T.Email AS ApplicationUser_Email, 
                T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
                T.PasswordHash AS ApplicationUser_PasswordHash, 
                T.SecurityStamp AS ApplicationUser_SecurityStamp, 
                T.PhoneNumber AS ApplicationUser_PhoneNumber, 
                T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
                T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
                T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
                T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
                T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
                T.UserName AS ApplicationUser_UserName, 
                True AS _from0
            FROM MegaCinemaDBContext.Users AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Customer_Source).Id AS ApplicationUser_Id, 
                Key(T.ApplicationUser_Customer_Target).CustomerID AS [ApplicationUser.Customer_CustomerID], 
                True AS _from1
            FROM MegaCinemaDBContext.ApplicationUser_Customer AS T) AS T2
            ON T1.ApplicationUser_Id = T2.ApplicationUser_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Staff_Source).Id AS ApplicationUser_Id, 
                Key(T.ApplicationUser_Staff_Target).StaffID AS [ApplicationUser.Staff_StaffID], 
                True AS _from2
            FROM MegaCinemaDBContext.ApplicationUser_Staff AS T) AS T3
            ON T1.ApplicationUser_Id = T3.ApplicationUser_Id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T3.IdentityUserClaim_Id, T3.IdentityUserClaim_UserId, T3.IdentityUserClaim_ClaimType, T3.IdentityUserClaim_ClaimValue, T3.[IdentityUserClaim.ApplicationUser_Id])
    FROM (
        SELECT T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue, T2.[IdentityUserClaim.ApplicationUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS IdentityUserClaim_Id, 
                T.UserId AS IdentityUserClaim_UserId, 
                T.ClaimType AS IdentityUserClaim_ClaimType, 
                T.ClaimValue AS IdentityUserClaim_ClaimValue, 
                True AS _from0
            FROM MegaCinemaDBContext.IdentityUserClaims AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Claims_Target).Id AS IdentityUserClaim_Id, 
                Key(T.ApplicationUser_Claims_Source).Id AS [IdentityUserClaim.ApplicationUser_Id], 
                True AS _from1
            FROM MegaCinemaDBContext.ApplicationUser_Claims AS T) AS T2
            ON T1.IdentityUserClaim_Id = T2.IdentityUserClaim_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T3.IdentityUserLogin_UserId, T3.IdentityUserLogin_LoginProvider, T3.IdentityUserLogin_ProviderKey, T3.[IdentityUserLogin.ApplicationUser_Id])
    FROM (
        SELECT T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T2.[IdentityUserLogin.ApplicationUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.UserId AS IdentityUserLogin_UserId, 
                T.LoginProvider AS IdentityUserLogin_LoginProvider, 
                T.ProviderKey AS IdentityUserLogin_ProviderKey, 
                True AS _from0
            FROM MegaCinemaDBContext.IdentityUserLogins AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Logins_Target).UserId AS IdentityUserLogin_UserId, 
                Key(T.ApplicationUser_Logins_Source).Id AS [IdentityUserLogin.ApplicationUser_Id], 
                True AS _from1
            FROM MegaCinemaDBContext.ApplicationUser_Logins AS T) AS T2
            ON T1.IdentityUserLogin_UserId = T2.IdentityUserLogin_UserId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.AccountTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountTypes
        [MegaCinemaData.AccountType](T1.AccountType_TypeID, T1.AccountType_TypeName, T1.AccountType_TypePoint, T1.AccountType_TypeDiscount, T1.AccountType_CreatedDate, T1.AccountType_CreatedBy, T1.AccountType_UpdatedDate, T1.AccountType_UpdatedBy, T1.AccountType_MetaKeyword, T1.AccountType_MetaDescription)
    FROM (
        SELECT 
            T.TypeID AS AccountType_TypeID, 
            T.TypeName AS AccountType_TypeName, 
            T.TypePoint AS AccountType_TypePoint, 
            T.TypeDiscount AS AccountType_TypeDiscount, 
            T.CreatedDate AS AccountType_CreatedDate, 
            T.CreatedBy AS AccountType_CreatedBy, 
            T.UpdatedDate AS AccountType_UpdatedDate, 
            T.UpdatedBy AS AccountType_UpdatedBy, 
            T.MetaKeyword AS AccountType_MetaKeyword, 
            T.MetaDescription AS AccountType_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.AccountType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [MegaCinemaData.Customer](T1.Customer_CustomerID, T1.Customer_CustomerPrefix, T1.Customer_CustomerCode, T1.Customer_CustomerPoint, T1.Customer_CustomerAvatar, T1.Customer_CustomerIP, T1.Customer_CustomerAccountType, T1.Customer_CustomerStatus, T1.Customer_CreatedDate, T1.Customer_CreatedBy, T1.Customer_UpdatedDate, T1.Customer_UpdatedBy, T1.Customer_MetaKeyword, T1.Customer_MetaDescription)
    FROM (
        SELECT 
            T.CustomerID AS Customer_CustomerID, 
            T.CustomerPrefix AS Customer_CustomerPrefix, 
            T.CustomerCode AS Customer_CustomerCode, 
            T.CustomerPoint AS Customer_CustomerPoint, 
            T.CustomerAvatar AS Customer_CustomerAvatar, 
            T.CustomerIP AS Customer_CustomerIP, 
            T.CustomerAccountType AS Customer_CustomerAccountType, 
            T.CustomerStatus AS Customer_CustomerStatus, 
            T.CreatedDate AS Customer_CreatedDate, 
            T.CreatedBy AS Customer_CreatedBy, 
            T.UpdatedDate AS Customer_UpdatedDate, 
            T.UpdatedBy AS Customer_UpdatedBy, 
            T.MetaKeyword AS Customer_MetaKeyword, 
            T.MetaDescription AS Customer_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Customer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.BookingTickets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BookingTickets
        [MegaCinemaData.BookingTicket](T1.BookingTicket_BookingTicketID, T1.BookingTicket_BookingTicketPrefix, T1.BookingTicket_BookingTicketCode, T1.BookingTicket_BookingTicketFilmID, T1.BookingTicket_BookingTicketRoomID, T1.BookingTicket_BookingTicketTimeDetail, T1.BookingTicket_BookingTicketPrice, T1.BookingTicket_BookingPaymentDate, T1.BookingTicket_CustomerID, T1.BookingTicket_BookingTicketStatusID, T1.BookingTicket_CreatedDate, T1.BookingTicket_CreatedBy, T1.BookingTicket_UpdatedDate, T1.BookingTicket_UpdatedBy, T1.BookingTicket_MetaKeyword, T1.BookingTicket_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS BookingTicket_BookingTicketID, 
            T.BookingTicketPrefix AS BookingTicket_BookingTicketPrefix, 
            T.BookingTicketCode AS BookingTicket_BookingTicketCode, 
            T.BookingTicketFilmID AS BookingTicket_BookingTicketFilmID, 
            T.BookingTicketRoomID AS BookingTicket_BookingTicketRoomID, 
            T.BookingTicketTimeDetail AS BookingTicket_BookingTicketTimeDetail, 
            T.BookingTicketPrice AS BookingTicket_BookingTicketPrice, 
            T.BookingPaymentDate AS BookingTicket_BookingPaymentDate, 
            T.CustomerID AS BookingTicket_CustomerID, 
            T.BookingTicketStatusID AS BookingTicket_BookingTicketStatusID, 
            T.CreatedDate AS BookingTicket_CreatedDate, 
            T.CreatedBy AS BookingTicket_CreatedBy, 
            T.UpdatedDate AS BookingTicket_UpdatedDate, 
            T.UpdatedBy AS BookingTicket_UpdatedBy, 
            T.MetaKeyword AS BookingTicket_MetaKeyword, 
            T.MetaDescription AS BookingTicket_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.BookingTicket AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Films.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Films
        [MegaCinemaData.Film](T1.Film_FilmID, T1.Film_FilmPrefix, T1.Film_FilmCode, T1.Film_FilmName, T1.Film_FilmDuration, T1.Film_FilmFirstPremiered, T1.Film_FilmLanguage, T1.Film_FilmContent, T1.Film_FilmFinishPremiered, T1.Film_FilmPoster, T1.Film_FilmCategories, T1.Film_FilmCompanyRelease, T1.Film_FilmTrailer, T1.Film_FilmRatingID, T1.Film_FilmStatus, T1.Film_CreatedDate, T1.Film_CreatedBy, T1.Film_UpdatedDate, T1.Film_UpdatedBy, T1.Film_MetaKeyword, T1.Film_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS Film_FilmID, 
            T.FilmPrefix AS Film_FilmPrefix, 
            T.FilmCode AS Film_FilmCode, 
            T.FilmName AS Film_FilmName, 
            T.FilmDuration AS Film_FilmDuration, 
            T.FilmFirstPremiered AS Film_FilmFirstPremiered, 
            T.FilmLanguage AS Film_FilmLanguage, 
            T.FilmContent AS Film_FilmContent, 
            T.FilmFinishPremiered AS Film_FilmFinishPremiered, 
            T.FilmPoster AS Film_FilmPoster, 
            T.FilmCategories AS Film_FilmCategories, 
            T.FilmCompanyRelease AS Film_FilmCompanyRelease, 
            T.FilmTrailer AS Film_FilmTrailer, 
            T.FilmRatingID AS Film_FilmRatingID, 
            T.FilmStatus AS Film_FilmStatus, 
            T.CreatedDate AS Film_CreatedDate, 
            T.CreatedBy AS Film_CreatedBy, 
            T.UpdatedDate AS Film_UpdatedDate, 
            T.UpdatedBy AS Film_UpdatedBy, 
            T.MetaKeyword AS Film_MetaKeyword, 
            T.MetaDescription AS Film_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Film AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.AdsBanners.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdsBanners
        [MegaCinemaData.AdsBanner](T1.AdsBanner_AdsId, T1.AdsBanner_FilmId, T1.AdsBanner_AdsDescription, T1.AdsBanner_CreatedDate, T1.AdsBanner_CreatedBy, T1.AdsBanner_UpdatedDate, T1.AdsBanner_UpdatedBy, T1.AdsBanner_MetaKeyword, T1.AdsBanner_MetaDescription)
    FROM (
        SELECT 
            T.AdsId AS AdsBanner_AdsId, 
            T.FilmId AS AdsBanner_FilmId, 
            T.AdsDescription AS AdsBanner_AdsDescription, 
            T.CreatedDate AS AdsBanner_CreatedDate, 
            T.CreatedBy AS AdsBanner_CreatedBy, 
            T.UpdatedDate AS AdsBanner_UpdatedDate, 
            T.UpdatedBy AS AdsBanner_UpdatedBy, 
            T.MetaKeyword AS AdsBanner_MetaKeyword, 
            T.MetaDescription AS AdsBanner_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.AdsBanner AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.DetailCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetailCategories
        [MegaCinemaData.DetailCategory](T1.DetailCategory_FilmID, T1.DetailCategory_FilmCategoryID, T1.DetailCategory_Description, T1.DetailCategory_CreatedDate, T1.DetailCategory_CreatedBy, T1.DetailCategory_UpdatedDate, T1.DetailCategory_UpdatedBy, T1.DetailCategory_MetaKeyword, T1.DetailCategory_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS DetailCategory_FilmID, 
            T.FilmCategoryID AS DetailCategory_FilmCategoryID, 
            T.Description AS DetailCategory_Description, 
            T.CreatedDate AS DetailCategory_CreatedDate, 
            T.CreatedBy AS DetailCategory_CreatedBy, 
            T.UpdatedDate AS DetailCategory_UpdatedDate, 
            T.UpdatedBy AS DetailCategory_UpdatedBy, 
            T.MetaKeyword AS DetailCategory_MetaKeyword, 
            T.MetaDescription AS DetailCategory_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.DetailCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FilmCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmCategories
        [MegaCinemaData.FilmCategory](T1.FilmCategory_FilmCategoryID, T1.FilmCategory_FilmCategoryName, T1.FilmCategory_FilmCategoryDescrip, T1.FilmCategory_CreatedDate, T1.FilmCategory_CreatedBy, T1.FilmCategory_UpdatedDate, T1.FilmCategory_UpdatedBy, T1.FilmCategory_MetaKeyword, T1.FilmCategory_MetaDescription)
    FROM (
        SELECT 
            T.FilmCategoryID AS FilmCategory_FilmCategoryID, 
            T.FilmCategoryName AS FilmCategory_FilmCategoryName, 
            T.FilmCategoryDescrip AS FilmCategory_FilmCategoryDescrip, 
            T.CreatedDate AS FilmCategory_CreatedDate, 
            T.CreatedBy AS FilmCategory_CreatedBy, 
            T.UpdatedDate AS FilmCategory_UpdatedDate, 
            T.UpdatedBy AS FilmCategory_UpdatedBy, 
            T.MetaKeyword AS FilmCategory_MetaKeyword, 
            T.MetaDescription AS FilmCategory_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FilmCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.DetailFormats.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetailFormats
        [MegaCinemaData.DetailFormat](T1.DetailFormat_FilmID, T1.DetailFormat_FilmFormatID, T1.DetailFormat_Description, T1.DetailFormat_CreatedDate, T1.DetailFormat_CreatedBy, T1.DetailFormat_UpdatedDate, T1.DetailFormat_UpdatedBy, T1.DetailFormat_MetaKeyword, T1.DetailFormat_MetaDescription)
    FROM (
        SELECT 
            T.FilmID AS DetailFormat_FilmID, 
            T.FilmFormatID AS DetailFormat_FilmFormatID, 
            T.Description AS DetailFormat_Description, 
            T.CreatedDate AS DetailFormat_CreatedDate, 
            T.CreatedBy AS DetailFormat_CreatedBy, 
            T.UpdatedDate AS DetailFormat_UpdatedDate, 
            T.UpdatedBy AS DetailFormat_UpdatedBy, 
            T.MetaKeyword AS DetailFormat_MetaKeyword, 
            T.MetaDescription AS DetailFormat_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.DetailFormat AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FilmFormats.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmFormats
        [MegaCinemaData.FilmFormat](T1.FilmFormat_FilmFormatID, T1.FilmFormat_FilmFormatName, T1.FilmFormat_FilmFormatDescrip, T1.FilmFormat_CreatedDate, T1.FilmFormat_CreatedBy, T1.FilmFormat_UpdatedDate, T1.FilmFormat_UpdatedBy, T1.FilmFormat_MetaKeyword, T1.FilmFormat_MetaDescription)
    FROM (
        SELECT 
            T.FilmFormatID AS FilmFormat_FilmFormatID, 
            T.FilmFormatName AS FilmFormat_FilmFormatName, 
            T.FilmFormatDescrip AS FilmFormat_FilmFormatDescrip, 
            T.CreatedDate AS FilmFormat_CreatedDate, 
            T.CreatedBy AS FilmFormat_CreatedBy, 
            T.UpdatedDate AS FilmFormat_UpdatedDate, 
            T.UpdatedBy AS FilmFormat_UpdatedBy, 
            T.MetaKeyword AS FilmFormat_MetaKeyword, 
            T.MetaDescription AS FilmFormat_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FilmFormat AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FilmRatings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmRatings
        [MegaCinemaData.FilmRating](T1.FilmRating_RatingID, T1.FilmRating_RatingName, T1.FilmRating_RatingDescription, T1.FilmRating_CreatedDate, T1.FilmRating_CreatedBy, T1.FilmRating_UpdatedDate, T1.FilmRating_UpdatedBy, T1.FilmRating_MetaKeyword, T1.FilmRating_MetaDescription)
    FROM (
        SELECT 
            T.RatingID AS FilmRating_RatingID, 
            T.RatingName AS FilmRating_RatingName, 
            T.RatingDescription AS FilmRating_RatingDescription, 
            T.CreatedDate AS FilmRating_CreatedDate, 
            T.CreatedBy AS FilmRating_CreatedBy, 
            T.UpdatedDate AS FilmRating_UpdatedDate, 
            T.UpdatedBy AS FilmRating_UpdatedBy, 
            T.MetaKeyword AS FilmRating_MetaKeyword, 
            T.MetaDescription AS FilmRating_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FilmRating AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FilmSessions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmSessions
        [MegaCinemaData.FilmSession](T1.FilmSession_FilmSessionID, T1.FilmSession_FilmID, T1.FilmSession_CinemaID, T1.FilmSession_DateStartSession, T1.FilmSession_DateFinishSession, T1.FilmSession_AssignDescription, T1.FilmSession_StaffID, T1.FilmSession_FilmSessionStatusID, T1.FilmSession_CreatedDate, T1.FilmSession_CreatedBy, T1.FilmSession_UpdatedDate, T1.FilmSession_UpdatedBy, T1.FilmSession_MetaKeyword, T1.FilmSession_MetaDescription)
    FROM (
        SELECT 
            T.FilmSessionID AS FilmSession_FilmSessionID, 
            T.FilmID AS FilmSession_FilmID, 
            T.CinemaID AS FilmSession_CinemaID, 
            T.DateStartSession AS FilmSession_DateStartSession, 
            T.DateFinishSession AS FilmSession_DateFinishSession, 
            T.AssignDescription AS FilmSession_AssignDescription, 
            T.StaffID AS FilmSession_StaffID, 
            T.FilmSessionStatusID AS FilmSession_FilmSessionStatusID, 
            T.CreatedDate AS FilmSession_CreatedDate, 
            T.CreatedBy AS FilmSession_CreatedBy, 
            T.UpdatedDate AS FilmSession_UpdatedDate, 
            T.UpdatedBy AS FilmSession_UpdatedBy, 
            T.MetaKeyword AS FilmSession_MetaKeyword, 
            T.MetaDescription AS FilmSession_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FilmSession AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Cinemas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cinemas
        [MegaCinemaData.Cinema](T1.Cinema_CinemaID, T1.Cinema_CinemaPrefix, T1.Cinema_CinemaCode, T1.Cinema_CinemaFullName, T1.Cinema_CinemaAddress, T1.Cinema_CinemaPhone, T1.Cinema_CinemaEmail, T1.Cinema_CinemaManagerID, T1.Cinema_CinemaStatus, T1.Cinema_CreatedDate, T1.Cinema_CreatedBy, T1.Cinema_UpdatedDate, T1.Cinema_UpdatedBy, T1.Cinema_MetaKeyword, T1.Cinema_MetaDescription)
    FROM (
        SELECT 
            T.CinemaID AS Cinema_CinemaID, 
            T.CinemaPrefix AS Cinema_CinemaPrefix, 
            T.CinemaCode AS Cinema_CinemaCode, 
            T.CinemaFullName AS Cinema_CinemaFullName, 
            T.CinemaAddress AS Cinema_CinemaAddress, 
            T.CinemaPhone AS Cinema_CinemaPhone, 
            T.CinemaEmail AS Cinema_CinemaEmail, 
            T.CinemaManagerID AS Cinema_CinemaManagerID, 
            T.CinemaStatus AS Cinema_CinemaStatus, 
            T.CreatedDate AS Cinema_CreatedDate, 
            T.CreatedBy AS Cinema_CreatedBy, 
            T.UpdatedDate AS Cinema_UpdatedDate, 
            T.UpdatedBy AS Cinema_UpdatedBy, 
            T.MetaKeyword AS Cinema_MetaKeyword, 
            T.MetaDescription AS Cinema_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Cinema AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FeatureDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FeatureDetails
        [MegaCinemaData.FeatureDetail](T1.FeatureDetail_FeatureID, T1.FeatureDetail_CinemaID, T1.FeatureDetail_Description, T1.FeatureDetail_CreatedDate, T1.FeatureDetail_CreatedBy, T1.FeatureDetail_UpdatedDate, T1.FeatureDetail_UpdatedBy, T1.FeatureDetail_MetaKeyword, T1.FeatureDetail_MetaDescription)
    FROM (
        SELECT 
            T.FeatureID AS FeatureDetail_FeatureID, 
            T.CinemaID AS FeatureDetail_CinemaID, 
            T.Description AS FeatureDetail_Description, 
            T.CreatedDate AS FeatureDetail_CreatedDate, 
            T.CreatedBy AS FeatureDetail_CreatedBy, 
            T.UpdatedDate AS FeatureDetail_UpdatedDate, 
            T.UpdatedBy AS FeatureDetail_UpdatedBy, 
            T.MetaKeyword AS FeatureDetail_MetaKeyword, 
            T.MetaDescription AS FeatureDetail_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FeatureDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.CinemaFeatures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CinemaFeatures
        [MegaCinemaData.CinemaFeature](T1.CinemaFeature_FeatureID, T1.CinemaFeature_FeatureType, T1.CinemaFeature_FeatureContent, T1.CinemaFeature_FeatureDescription, T1.CinemaFeature_CreatedDate, T1.CinemaFeature_CreatedBy, T1.CinemaFeature_UpdatedDate, T1.CinemaFeature_UpdatedBy, T1.CinemaFeature_MetaKeyword, T1.CinemaFeature_MetaDescription)
    FROM (
        SELECT 
            T.FeatureID AS CinemaFeature_FeatureID, 
            T.FeatureType AS CinemaFeature_FeatureType, 
            T.FeatureContent AS CinemaFeature_FeatureContent, 
            T.FeatureDescription AS CinemaFeature_FeatureDescription, 
            T.CreatedDate AS CinemaFeature_CreatedDate, 
            T.CreatedBy AS CinemaFeature_CreatedBy, 
            T.UpdatedDate AS CinemaFeature_UpdatedDate, 
            T.UpdatedBy AS CinemaFeature_UpdatedBy, 
            T.MetaKeyword AS CinemaFeature_MetaKeyword, 
            T.MetaDescription AS CinemaFeature_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.CinemaFeature AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.PromotionCines.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PromotionCines
        [MegaCinemaData.PromotionCine](T1.PromotionCine_PromotionID, T1.PromotionCine_CinemaID, T1.PromotionCine_Description, T1.PromotionCine_PromotionCineStatusID, T1.PromotionCine_CreatedDate, T1.PromotionCine_CreatedBy, T1.PromotionCine_UpdatedDate, T1.PromotionCine_UpdatedBy, T1.PromotionCine_MetaKeyword, T1.PromotionCine_MetaDescription)
    FROM (
        SELECT 
            T.PromotionID AS PromotionCine_PromotionID, 
            T.CinemaID AS PromotionCine_CinemaID, 
            T.Description AS PromotionCine_Description, 
            T.PromotionCineStatusID AS PromotionCine_PromotionCineStatusID, 
            T.CreatedDate AS PromotionCine_CreatedDate, 
            T.CreatedBy AS PromotionCine_CreatedBy, 
            T.UpdatedDate AS PromotionCine_UpdatedDate, 
            T.UpdatedBy AS PromotionCine_UpdatedBy, 
            T.MetaKeyword AS PromotionCine_MetaKeyword, 
            T.MetaDescription AS PromotionCine_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.PromotionCine AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Promotions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Promotions
        [MegaCinemaData.Promotion](T1.Promotion_PromotionID, T1.Promotion_PromotionHeader, T1.Promotion_PromotionContent, T1.Promotion_PromotionPoster, T1.Promotion_PromotionDateStart, T1.Promotion_PromotionDateFinish, T1.Promotion_PromotionStatusID, T1.Promotion_CreatedDate, T1.Promotion_CreatedBy, T1.Promotion_UpdatedDate, T1.Promotion_UpdatedBy, T1.Promotion_MetaKeyword, T1.Promotion_MetaDescription)
    FROM (
        SELECT 
            T.PromotionID AS Promotion_PromotionID, 
            T.PromotionHeader AS Promotion_PromotionHeader, 
            T.PromotionContent AS Promotion_PromotionContent, 
            T.PromotionPoster AS Promotion_PromotionPoster, 
            T.PromotionDateStart AS Promotion_PromotionDateStart, 
            T.PromotionDateFinish AS Promotion_PromotionDateFinish, 
            T.PromotionStatusID AS Promotion_PromotionStatusID, 
            T.CreatedDate AS Promotion_CreatedDate, 
            T.CreatedBy AS Promotion_CreatedBy, 
            T.UpdatedDate AS Promotion_UpdatedDate, 
            T.UpdatedBy AS Promotion_UpdatedBy, 
            T.MetaKeyword AS Promotion_MetaKeyword, 
            T.MetaDescription AS Promotion_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Promotion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Statuss.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Statuss
        [MegaCinemaData.Status](T1.Status_StatusID, T1.Status_StatusName, T1.Status_StatusDescription, T1.Status_CreatedDate, T1.Status_CreatedBy, T1.Status_UpdatedDate, T1.Status_UpdatedBy, T1.Status_MetaKeyword, T1.Status_MetaDescription)
    FROM (
        SELECT 
            T.StatusID AS Status_StatusID, 
            T.StatusName AS Status_StatusName, 
            T.StatusDescription AS Status_StatusDescription, 
            T.CreatedDate AS Status_CreatedDate, 
            T.CreatedBy AS Status_CreatedBy, 
            T.UpdatedDate AS Status_UpdatedDate, 
            T.UpdatedBy AS Status_UpdatedBy, 
            T.MetaKeyword AS Status_MetaKeyword, 
            T.MetaDescription AS Status_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Status AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FilmCalendarCreates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FilmCalendarCreates
        [MegaCinemaData.FilmCalendarCreate](T1.FilmCalendarCreate_FilmCalendarCreateID, T1.FilmCalendarCreate_FilmSessionID, T1.FilmCalendarCreate_StaffID, T1.FilmCalendarCreate_FilmCalendarContent, T1.FilmCalendarCreate_FilmCalendarDescription, T1.FilmCalendarCreate_StatusID, T1.FilmCalendarCreate_CreatedDate, T1.FilmCalendarCreate_CreatedBy, T1.FilmCalendarCreate_UpdatedDate, T1.FilmCalendarCreate_UpdatedBy, T1.FilmCalendarCreate_MetaKeyword, T1.FilmCalendarCreate_MetaDescription)
    FROM (
        SELECT 
            T.FilmCalendarCreateID AS FilmCalendarCreate_FilmCalendarCreateID, 
            T.FilmSessionID AS FilmCalendarCreate_FilmSessionID, 
            T.StaffID AS FilmCalendarCreate_StaffID, 
            T.FilmCalendarContent AS FilmCalendarCreate_FilmCalendarContent, 
            T.FilmCalendarDescription AS FilmCalendarCreate_FilmCalendarDescription, 
            T.StatusID AS FilmCalendarCreate_StatusID, 
            T.CreatedDate AS FilmCalendarCreate_CreatedDate, 
            T.CreatedBy AS FilmCalendarCreate_CreatedBy, 
            T.UpdatedDate AS FilmCalendarCreate_UpdatedDate, 
            T.UpdatedBy AS FilmCalendarCreate_UpdatedBy, 
            T.MetaKeyword AS FilmCalendarCreate_MetaKeyword, 
            T.MetaDescription AS FilmCalendarCreate_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FilmCalendarCreate AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Staffs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Staffs
        [MegaCinemaData.Staff](T1.Staff_StaffID, T1.Staff_StaffPrefix, T1.Staff_StaffCode, T1.Staff_StaffRegencyID, T1.Staff_StaffStatus, T1.Staff_CreatedDate, T1.Staff_CreatedBy, T1.Staff_UpdatedDate, T1.Staff_UpdatedBy, T1.Staff_MetaKeyword, T1.Staff_MetaDescription)
    FROM (
        SELECT 
            T.StaffID AS Staff_StaffID, 
            T.StaffPrefix AS Staff_StaffPrefix, 
            T.StaffCode AS Staff_StaffCode, 
            T.StaffRegencyID AS Staff_StaffRegencyID, 
            T.StaffStatus AS Staff_StaffStatus, 
            T.CreatedDate AS Staff_CreatedDate, 
            T.CreatedBy AS Staff_CreatedBy, 
            T.UpdatedDate AS Staff_UpdatedDate, 
            T.UpdatedBy AS Staff_UpdatedBy, 
            T.MetaKeyword AS Staff_MetaKeyword, 
            T.MetaDescription AS Staff_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Staff AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Regencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Regencies
        [MegaCinemaData.Regency](T1.Regency_RegencyID, T1.Regency_RegencyName, T1.Regency_CreatedDate, T1.Regency_CreatedBy, T1.Regency_UpdatedDate, T1.Regency_UpdatedBy, T1.Regency_MetaKeyword, T1.Regency_MetaDescription)
    FROM (
        SELECT 
            T.RegencyID AS Regency_RegencyID, 
            T.RegencyName AS Regency_RegencyName, 
            T.CreatedDate AS Regency_CreatedDate, 
            T.CreatedBy AS Regency_CreatedBy, 
            T.UpdatedDate AS Regency_UpdatedDate, 
            T.UpdatedBy AS Regency_UpdatedBy, 
            T.MetaKeyword AS Regency_MetaKeyword, 
            T.MetaDescription AS Regency_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Regency AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.FoodLists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FoodLists
        [MegaCinemaData.FoodList](T1.FoodList_FoodID, T1.FoodList_FoodPrefix, T1.FoodList_FoodCode, T1.FoodList_FoodName, T1.FoodList_FoodPrice, T1.FoodList_FoodDescription, T1.FoodList_FoodPoster, T1.FoodList_FoodStatus, T1.FoodList_CreatedDate, T1.FoodList_CreatedBy, T1.FoodList_UpdatedDate, T1.FoodList_UpdatedBy, T1.FoodList_MetaKeyword, T1.FoodList_MetaDescription)
    FROM (
        SELECT 
            T.FoodID AS FoodList_FoodID, 
            T.FoodPrefix AS FoodList_FoodPrefix, 
            T.FoodCode AS FoodList_FoodCode, 
            T.FoodName AS FoodList_FoodName, 
            T.FoodPrice AS FoodList_FoodPrice, 
            T.FoodDescription AS FoodList_FoodDescription, 
            T.FoodPoster AS FoodList_FoodPoster, 
            T.FoodStatus AS FoodList_FoodStatus, 
            T.CreatedDate AS FoodList_CreatedDate, 
            T.CreatedBy AS FoodList_CreatedBy, 
            T.UpdatedDate AS FoodList_UpdatedDate, 
            T.UpdatedBy AS FoodList_UpdatedBy, 
            T.MetaKeyword AS FoodList_MetaKeyword, 
            T.MetaDescription AS FoodList_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.FoodList AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.TicketCombos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketCombos
        [MegaCinemaData.TicketCombo](T1.TicketCombo_BookingTicketID, T1.TicketCombo_FoodListID, T1.TicketCombo_FoodQuantity, T1.TicketCombo_FoodPrice, T1.TicketCombo_FoodDiscount, T1.TicketCombo_FoodTotalPrice, T1.TicketCombo_FoodStatusID, T1.TicketCombo_CreatedDate, T1.TicketCombo_CreatedBy, T1.TicketCombo_UpdatedDate, T1.TicketCombo_UpdatedBy, T1.TicketCombo_MetaKeyword, T1.TicketCombo_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS TicketCombo_BookingTicketID, 
            T.FoodListID AS TicketCombo_FoodListID, 
            T.FoodQuantity AS TicketCombo_FoodQuantity, 
            T.FoodPrice AS TicketCombo_FoodPrice, 
            T.FoodDiscount AS TicketCombo_FoodDiscount, 
            T.FoodTotalPrice AS TicketCombo_FoodTotalPrice, 
            T.FoodStatusID AS TicketCombo_FoodStatusID, 
            T.CreatedDate AS TicketCombo_CreatedDate, 
            T.CreatedBy AS TicketCombo_CreatedBy, 
            T.UpdatedDate AS TicketCombo_UpdatedDate, 
            T.UpdatedBy AS TicketCombo_UpdatedBy, 
            T.MetaKeyword AS TicketCombo_MetaKeyword, 
            T.MetaDescription AS TicketCombo_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.TicketCombo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.RoomFilms.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoomFilms
        [MegaCinemaData.RoomFilm](T1.RoomFilm_RoomID, T1.RoomFilm_RoomPrefix, T1.RoomFilm_RoomCode, T1.RoomFilm_RoomName, T1.RoomFilm_RoomSeatPosition, T1.RoomFilm_RoomCinemaDescription, T1.RoomFilm_RoomPoster, T1.RoomFilm_RoomCinemaID, T1.RoomFilm_RoomStatusID, T1.RoomFilm_CreatedDate, T1.RoomFilm_CreatedBy, T1.RoomFilm_UpdatedDate, T1.RoomFilm_UpdatedBy, T1.RoomFilm_MetaKeyword, T1.RoomFilm_MetaDescription)
    FROM (
        SELECT 
            T.RoomID AS RoomFilm_RoomID, 
            T.RoomPrefix AS RoomFilm_RoomPrefix, 
            T.RoomCode AS RoomFilm_RoomCode, 
            T.RoomName AS RoomFilm_RoomName, 
            T.RoomSeatPosition AS RoomFilm_RoomSeatPosition, 
            T.RoomCinemaDescription AS RoomFilm_RoomCinemaDescription, 
            T.RoomPoster AS RoomFilm_RoomPoster, 
            T.RoomCinemaID AS RoomFilm_RoomCinemaID, 
            T.RoomStatusID AS RoomFilm_RoomStatusID, 
            T.CreatedDate AS RoomFilm_CreatedDate, 
            T.CreatedBy AS RoomFilm_CreatedBy, 
            T.UpdatedDate AS RoomFilm_UpdatedDate, 
            T.UpdatedBy AS RoomFilm_UpdatedBy, 
            T.MetaKeyword AS RoomFilm_MetaKeyword, 
            T.MetaDescription AS RoomFilm_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.RoomFilm AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.SeatMaintenances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatMaintenances
        [MegaCinemaData.SeatMaintenance](T1.SeatMaintenance_ID, T1.SeatMaintenance_SeatID, T1.SeatMaintenance_RoomID, T1.SeatMaintenance_Description, T1.SeatMaintenance_SeatStatusID, T1.SeatMaintenance_CreatedDate, T1.SeatMaintenance_CreatedBy, T1.SeatMaintenance_UpdatedDate, T1.SeatMaintenance_UpdatedBy, T1.SeatMaintenance_MetaKeyword, T1.SeatMaintenance_MetaDescription)
    FROM (
        SELECT 
            T.ID AS SeatMaintenance_ID, 
            T.SeatID AS SeatMaintenance_SeatID, 
            T.RoomID AS SeatMaintenance_RoomID, 
            T.Description AS SeatMaintenance_Description, 
            T.SeatStatusID AS SeatMaintenance_SeatStatusID, 
            T.CreatedDate AS SeatMaintenance_CreatedDate, 
            T.CreatedBy AS SeatMaintenance_CreatedBy, 
            T.UpdatedDate AS SeatMaintenance_UpdatedDate, 
            T.UpdatedBy AS SeatMaintenance_UpdatedBy, 
            T.MetaKeyword AS SeatMaintenance_MetaKeyword, 
            T.MetaDescription AS SeatMaintenance_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.SeatMaintenance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.SeatLists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatLists
        [MegaCinemaData.SeatList](T1.SeatList_SeatID, T1.SeatList_SeatTypeID, T1.SeatList_SeatPrefix, T1.SeatList_SeatCode, T1.SeatList_SeatName, T1.SeatList_SeatCoupleTwoID, T1.SeatList_SeatRoomID, T1.SeatList_SeatRow, T1.SeatList_SeatColumn, T1.SeatList_SeatStatusID, T1.SeatList_CreatedDate, T1.SeatList_CreatedBy, T1.SeatList_UpdatedDate, T1.SeatList_UpdatedBy, T1.SeatList_MetaKeyword, T1.SeatList_MetaDescription)
    FROM (
        SELECT 
            T.SeatID AS SeatList_SeatID, 
            T.SeatTypeID AS SeatList_SeatTypeID, 
            T.SeatPrefix AS SeatList_SeatPrefix, 
            T.SeatCode AS SeatList_SeatCode, 
            T.SeatName AS SeatList_SeatName, 
            T.SeatCoupleTwoID AS SeatList_SeatCoupleTwoID, 
            T.SeatRoomID AS SeatList_SeatRoomID, 
            T.SeatRow AS SeatList_SeatRow, 
            T.SeatColumn AS SeatList_SeatColumn, 
            T.SeatStatusID AS SeatList_SeatStatusID, 
            T.CreatedDate AS SeatList_CreatedDate, 
            T.CreatedBy AS SeatList_CreatedBy, 
            T.UpdatedDate AS SeatList_UpdatedDate, 
            T.UpdatedBy AS SeatList_UpdatedBy, 
            T.MetaKeyword AS SeatList_MetaKeyword, 
            T.MetaDescription AS SeatList_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.SeatList AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.SeatTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SeatTypes
        [MegaCinemaData.SeatType](T1.SeatType_SeatTypeID, T1.SeatType_SeatTypeName, T1.SeatType_SeatTypeSurcharge, T1.SeatType_SeatTypeStatus, T1.SeatType_CreatedDate, T1.SeatType_CreatedBy, T1.SeatType_UpdatedDate, T1.SeatType_UpdatedBy, T1.SeatType_MetaKeyword, T1.SeatType_MetaDescription)
    FROM (
        SELECT 
            T.SeatTypeID AS SeatType_SeatTypeID, 
            T.SeatTypeName AS SeatType_SeatTypeName, 
            T.SeatTypeSurcharge AS SeatType_SeatTypeSurcharge, 
            T.SeatTypeStatus AS SeatType_SeatTypeStatus, 
            T.CreatedDate AS SeatType_CreatedDate, 
            T.CreatedBy AS SeatType_CreatedBy, 
            T.UpdatedDate AS SeatType_UpdatedDate, 
            T.UpdatedBy AS SeatType_UpdatedBy, 
            T.MetaKeyword AS SeatType_MetaKeyword, 
            T.MetaDescription AS SeatType_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.SeatType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.TicketDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketDetails
        [MegaCinemaData.TicketDetail](T1.TicketDetail_BookingTicketID, T1.TicketDetail_SeatName, T1.TicketDetail_SeatTypeID, T1.TicketDetail_SeatPrice, T1.TicketDetail_TicketCategoryID, T1.TicketDetail_SeatDiscount, T1.TicketDetail_TotalPrice, T1.TicketDetail_TicketStatusID, T1.TicketDetail_CreatedDate, T1.TicketDetail_CreatedBy, T1.TicketDetail_UpdatedDate, T1.TicketDetail_UpdatedBy, T1.TicketDetail_MetaKeyword, T1.TicketDetail_MetaDescription)
    FROM (
        SELECT 
            T.BookingTicketID AS TicketDetail_BookingTicketID, 
            T.SeatName AS TicketDetail_SeatName, 
            T.SeatTypeID AS TicketDetail_SeatTypeID, 
            T.SeatPrice AS TicketDetail_SeatPrice, 
            T.TicketCategoryID AS TicketDetail_TicketCategoryID, 
            T.SeatDiscount AS TicketDetail_SeatDiscount, 
            T.TotalPrice AS TicketDetail_TotalPrice, 
            T.TicketStatusID AS TicketDetail_TicketStatusID, 
            T.CreatedDate AS TicketDetail_CreatedDate, 
            T.CreatedBy AS TicketDetail_CreatedBy, 
            T.UpdatedDate AS TicketDetail_UpdatedDate, 
            T.UpdatedBy AS TicketDetail_UpdatedBy, 
            T.MetaKeyword AS TicketDetail_MetaKeyword, 
            T.MetaDescription AS TicketDetail_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.TicketDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.TicketCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TicketCategories
        [MegaCinemaData.TicketCategory](T1.TicketCategory_TicketCateID, T1.TicketCategory_TicketCateName, T1.TicketCategory_TicketCatePrice, T1.TicketCategory_TicketCateStatusID, T1.TicketCategory_CreatedDate, T1.TicketCategory_CreatedBy, T1.TicketCategory_UpdatedDate, T1.TicketCategory_UpdatedBy, T1.TicketCategory_MetaKeyword, T1.TicketCategory_MetaDescription)
    FROM (
        SELECT 
            T.TicketCateID AS TicketCategory_TicketCateID, 
            T.TicketCateName AS TicketCategory_TicketCateName, 
            T.TicketCatePrice AS TicketCategory_TicketCatePrice, 
            T.TicketCateStatusID AS TicketCategory_TicketCateStatusID, 
            T.CreatedDate AS TicketCategory_CreatedDate, 
            T.CreatedBy AS TicketCategory_CreatedBy, 
            T.UpdatedDate AS TicketCategory_UpdatedDate, 
            T.UpdatedBy AS TicketCategory_UpdatedBy, 
            T.MetaKeyword AS TicketCategory_MetaKeyword, 
            T.MetaDescription AS TicketCategory_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.TicketCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.TimeSessions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView62()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TimeSessions
        [MegaCinemaData.TimeSession](T1.TimeSession_TimeSessionID, T1.TimeSession_TimeDetail, T1.TimeSession_TimeStatus, T1.TimeSession_CreatedDate, T1.TimeSession_CreatedBy, T1.TimeSession_UpdatedDate, T1.TimeSession_UpdatedBy, T1.TimeSession_MetaKeyword, T1.TimeSession_MetaDescription)
    FROM (
        SELECT 
            T.TimeSessionID AS TimeSession_TimeSessionID, 
            T.TimeDetail AS TimeSession_TimeDetail, 
            T.TimeStatus AS TimeSession_TimeStatus, 
            T.CreatedDate AS TimeSession_CreatedDate, 
            T.CreatedBy AS TimeSession_CreatedBy, 
            T.UpdatedDate AS TimeSession_UpdatedDate, 
            T.UpdatedBy AS TimeSession_UpdatedBy, 
            T.MetaKeyword AS TimeSession_MetaKeyword, 
            T.MetaDescription AS TimeSession_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.TimeSession AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView63()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [MegaCinemaData.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView64()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [MegaCinemaData.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId) WITH 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Roles, ROW(T1.[IdentityRole_Users.IdentityRole_Users_Source.Id]),[MegaCinemaData.IdentityRole]),[MegaCinemaData.IdentityRole_Users],IdentityRole_Users_Target,IdentityRole_Users_Source) 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Users, ROW(T1.[ApplicationUser_Roles.ApplicationUser_Roles_Source.Id]),[MegaCinemaData.ApplicationUser]),[MegaCinemaData.ApplicationUser_Roles],ApplicationUser_Roles_Target,ApplicationUser_Roles_Source) 
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0, 
            T.IdentityRole_Id AS [IdentityRole_Users.IdentityRole_Users_Source.Id], 
            T.ApplicationUser_Id AS [ApplicationUser_Roles.ApplicationUser_Roles_Source.Id]
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.IdentityRole_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView65()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole_Users
        [MegaCinemaData.IdentityRole_Users](T3.[IdentityRole_Users.IdentityRole_Users_Source], T3.[IdentityRole_Users.IdentityRole_Users_Target])
    FROM (
        SELECT -- Constructing IdentityRole_Users_Source
            CreateRef(MegaCinemaDBContext.Roles, row(T2.[IdentityRole_Users.IdentityRole_Users_Source.Id]), [MegaCinemaData.IdentityRole]) AS [IdentityRole_Users.IdentityRole_Users_Source], 
            T2.[IdentityRole_Users.IdentityRole_Users_Target]
        FROM (
            SELECT -- Constructing IdentityRole_Users_Target
                T1.[IdentityRole_Users.IdentityRole_Users_Source.Id], 
                CreateRef(MegaCinemaDBContext.IdentityUserRoles, row(T1.[IdentityRole_Users.IdentityRole_Users_Target.UserId], T1.[IdentityRole_Users.IdentityRole_Users_Target.RoleId]), [MegaCinemaData.IdentityUserRole]) AS [IdentityRole_Users.IdentityRole_Users_Target]
            FROM (
                SELECT 
                    T.IdentityRole_Id AS [IdentityRole_Users.IdentityRole_Users_Source.Id], 
                    T.UserId AS [IdentityRole_Users.IdentityRole_Users_Target.UserId], 
                    T.RoleId AS [IdentityRole_Users.IdentityRole_Users_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserRole AS T
                WHERE T.IdentityRole_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.ApplicationUser_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView66()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Roles
        [MegaCinemaData.ApplicationUser_Roles](T3.[ApplicationUser_Roles.ApplicationUser_Roles_Source], T3.[ApplicationUser_Roles.ApplicationUser_Roles_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Roles_Source
            CreateRef(MegaCinemaDBContext.Users, row(T2.[ApplicationUser_Roles.ApplicationUser_Roles_Source.Id]), [MegaCinemaData.ApplicationUser]) AS [ApplicationUser_Roles.ApplicationUser_Roles_Source], 
            T2.[ApplicationUser_Roles.ApplicationUser_Roles_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Roles_Target
                T1.[ApplicationUser_Roles.ApplicationUser_Roles_Source.Id], 
                CreateRef(MegaCinemaDBContext.IdentityUserRoles, row(T1.[ApplicationUser_Roles.ApplicationUser_Roles_Target.UserId], T1.[ApplicationUser_Roles.ApplicationUser_Roles_Target.RoleId]), [MegaCinemaData.IdentityUserRole]) AS [ApplicationUser_Roles.ApplicationUser_Roles_Target]
            FROM (
                SELECT 
                    T.ApplicationUser_Id AS [ApplicationUser_Roles.ApplicationUser_Roles_Source.Id], 
                    T.UserId AS [ApplicationUser_Roles.ApplicationUser_Roles_Target.UserId], 
                    T.RoleId AS [ApplicationUser_Roles.ApplicationUser_Roles_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserRole AS T
                WHERE T.ApplicationUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView67()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MegaCinemaData.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_FirstName, T1.ApplicationUser_LastName, T1.ApplicationUser_Birthday, T1.ApplicationUser_Sex, T1.ApplicationUser_SSN, T1.ApplicationUser_Address, T1.ApplicationUser_District, T1.ApplicationUser_City, T1.ApplicationUser_Avatar, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName) WITH 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Customers, ROW(T1.[ApplicationUser_Customer.ApplicationUser_Customer_Target.CustomerID]),[MegaCinemaData.Customer]),[MegaCinemaData.ApplicationUser_Customer],ApplicationUser_Customer_Source,ApplicationUser_Customer_Target) 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Staffs, ROW(T1.[ApplicationUser_Staff.ApplicationUser_Staff_Target.StaffID]),[MegaCinemaData.Staff]),[MegaCinemaData.ApplicationUser_Staff],ApplicationUser_Staff_Source,ApplicationUser_Staff_Target) 
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.FirstName AS ApplicationUser_FirstName, 
            T.LastName AS ApplicationUser_LastName, 
            T.Birthday AS ApplicationUser_Birthday, 
            T.Sex AS ApplicationUser_Sex, 
            T.SSN AS ApplicationUser_SSN, 
            T.Address AS ApplicationUser_Address, 
            T.District AS ApplicationUser_District, 
            T.City AS ApplicationUser_City, 
            T.Avatar AS ApplicationUser_Avatar, 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0, 
            T.Customer_CustomerID AS [ApplicationUser_Customer.ApplicationUser_Customer_Target.CustomerID], 
            T.Staff_StaffID AS [ApplicationUser_Staff.ApplicationUser_Staff_Target.StaffID]
        FROM CodeFirstDatabase.ApplicationUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.ApplicationUser_Customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView68()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Customer
        [MegaCinemaData.ApplicationUser_Customer](T3.[ApplicationUser_Customer.ApplicationUser_Customer_Source], T3.[ApplicationUser_Customer.ApplicationUser_Customer_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Customer_Source
            CreateRef(MegaCinemaDBContext.Users, row(T2.[ApplicationUser_Customer.ApplicationUser_Customer_Source.Id]), [MegaCinemaData.ApplicationUser]) AS [ApplicationUser_Customer.ApplicationUser_Customer_Source], 
            T2.[ApplicationUser_Customer.ApplicationUser_Customer_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Customer_Target
                T1.[ApplicationUser_Customer.ApplicationUser_Customer_Source.Id], 
                CreateRef(MegaCinemaDBContext.Customers, row(T1.[ApplicationUser_Customer.ApplicationUser_Customer_Target.CustomerID]), [MegaCinemaData.Customer]) AS [ApplicationUser_Customer.ApplicationUser_Customer_Target]
            FROM (
                SELECT 
                    T.Id AS [ApplicationUser_Customer.ApplicationUser_Customer_Source.Id], 
                    T.Customer_CustomerID AS [ApplicationUser_Customer.ApplicationUser_Customer_Target.CustomerID], 
                    True AS _from0
                FROM CodeFirstDatabase.ApplicationUser AS T
                WHERE T.Customer_CustomerID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.ApplicationUser_Staff.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView69()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Staff
        [MegaCinemaData.ApplicationUser_Staff](T3.[ApplicationUser_Staff.ApplicationUser_Staff_Source], T3.[ApplicationUser_Staff.ApplicationUser_Staff_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Staff_Source
            CreateRef(MegaCinemaDBContext.Users, row(T2.[ApplicationUser_Staff.ApplicationUser_Staff_Source.Id]), [MegaCinemaData.ApplicationUser]) AS [ApplicationUser_Staff.ApplicationUser_Staff_Source], 
            T2.[ApplicationUser_Staff.ApplicationUser_Staff_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Staff_Target
                T1.[ApplicationUser_Staff.ApplicationUser_Staff_Source.Id], 
                CreateRef(MegaCinemaDBContext.Staffs, row(T1.[ApplicationUser_Staff.ApplicationUser_Staff_Target.StaffID]), [MegaCinemaData.Staff]) AS [ApplicationUser_Staff.ApplicationUser_Staff_Target]
            FROM (
                SELECT 
                    T.Id AS [ApplicationUser_Staff.ApplicationUser_Staff_Source.Id], 
                    T.Staff_StaffID AS [ApplicationUser_Staff.ApplicationUser_Staff_Target.StaffID], 
                    True AS _from0
                FROM CodeFirstDatabase.ApplicationUser AS T
                WHERE T.Staff_StaffID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView70()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [MegaCinemaData.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue) WITH 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Users, ROW(T1.[ApplicationUser_Claims.ApplicationUser_Claims_Source.Id]),[MegaCinemaData.ApplicationUser]),[MegaCinemaData.ApplicationUser_Claims],ApplicationUser_Claims_Target,ApplicationUser_Claims_Source) 
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0, 
            T.ApplicationUser_Id AS [ApplicationUser_Claims.ApplicationUser_Claims_Source.Id]
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.ApplicationUser_Claims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView71()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Claims
        [MegaCinemaData.ApplicationUser_Claims](T3.[ApplicationUser_Claims.ApplicationUser_Claims_Source], T3.[ApplicationUser_Claims.ApplicationUser_Claims_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Claims_Source
            CreateRef(MegaCinemaDBContext.Users, row(T2.[ApplicationUser_Claims.ApplicationUser_Claims_Source.Id]), [MegaCinemaData.ApplicationUser]) AS [ApplicationUser_Claims.ApplicationUser_Claims_Source], 
            T2.[ApplicationUser_Claims.ApplicationUser_Claims_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Claims_Target
                T1.[ApplicationUser_Claims.ApplicationUser_Claims_Source.Id], 
                CreateRef(MegaCinemaDBContext.IdentityUserClaims, row(T1.[ApplicationUser_Claims.ApplicationUser_Claims_Target.Id]), [MegaCinemaData.IdentityUserClaim]) AS [ApplicationUser_Claims.ApplicationUser_Claims_Target]
            FROM (
                SELECT 
                    T.ApplicationUser_Id AS [ApplicationUser_Claims.ApplicationUser_Claims_Source.Id], 
                    T.Id AS [ApplicationUser_Claims.ApplicationUser_Claims_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserClaim AS T
                WHERE T.ApplicationUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView72()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [MegaCinemaData.IdentityUserLogin](T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey) WITH 
        RELATIONSHIP(CREATEREF(MegaCinemaDBContext.Users, ROW(T1.[ApplicationUser_Logins.ApplicationUser_Logins_Source.Id]),[MegaCinemaData.ApplicationUser]),[MegaCinemaData.ApplicationUser_Logins],ApplicationUser_Logins_Target,ApplicationUser_Logins_Source) 
    FROM (
        SELECT 
            T.UserId AS IdentityUserLogin_UserId, 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            True AS _from0, 
            T.ApplicationUser_Id AS [ApplicationUser_Logins.ApplicationUser_Logins_Source.Id]
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.ApplicationUser_Logins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView73()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Logins
        [MegaCinemaData.ApplicationUser_Logins](T3.[ApplicationUser_Logins.ApplicationUser_Logins_Source], T3.[ApplicationUser_Logins.ApplicationUser_Logins_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Logins_Source
            CreateRef(MegaCinemaDBContext.Users, row(T2.[ApplicationUser_Logins.ApplicationUser_Logins_Source.Id]), [MegaCinemaData.ApplicationUser]) AS [ApplicationUser_Logins.ApplicationUser_Logins_Source], 
            T2.[ApplicationUser_Logins.ApplicationUser_Logins_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Logins_Target
                T1.[ApplicationUser_Logins.ApplicationUser_Logins_Source.Id], 
                CreateRef(MegaCinemaDBContext.IdentityUserLogins, row(T1.[ApplicationUser_Logins.ApplicationUser_Logins_Target.UserId]), [MegaCinemaData.IdentityUserLogin]) AS [ApplicationUser_Logins.ApplicationUser_Logins_Target]
            FROM (
                SELECT 
                    T.ApplicationUser_Id AS [ApplicationUser_Logins.ApplicationUser_Logins_Source.Id], 
                    T.UserId AS [ApplicationUser_Logins.ApplicationUser_Logins_Target.UserId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserLogin AS T
                WHERE T.ApplicationUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EventTopic.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView74()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EventTopic
        [CodeFirstDatabaseSchema.EventTopic](T1.EventTopic_EventId, T1.EventTopic_EventTitle, T1.EventTopic_EventContent, T1.EventTopic_CreatedDate, T1.EventTopic_CreatedBy, T1.EventTopic_UpdatedDate, T1.EventTopic_UpdatedBy, T1.EventTopic_MetaKeyword, T1.EventTopic_MetaDescription)
    FROM (
        SELECT 
            T.EventId AS EventTopic_EventId, 
            T.EventTitle AS EventTopic_EventTitle, 
            T.EventContent AS EventTopic_EventContent, 
            T.CreatedDate AS EventTopic_CreatedDate, 
            T.CreatedBy AS EventTopic_CreatedBy, 
            T.UpdatedDate AS EventTopic_UpdatedDate, 
            T.UpdatedBy AS EventTopic_UpdatedBy, 
            T.MetaKeyword AS EventTopic_MetaKeyword, 
            T.MetaDescription AS EventTopic_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.EventTopics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.EventTopics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView75()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EventTopics
        [MegaCinemaData.EventTopic](T1.EventTopic_EventId, T1.EventTopic_EventTitle, T1.EventTopic_EventContent, T1.EventTopic_CreatedDate, T1.EventTopic_CreatedBy, T1.EventTopic_UpdatedDate, T1.EventTopic_UpdatedBy, T1.EventTopic_MetaKeyword, T1.EventTopic_MetaDescription)
    FROM (
        SELECT 
            T.EventId AS EventTopic_EventId, 
            T.EventTitle AS EventTopic_EventTitle, 
            T.EventContent AS EventTopic_EventContent, 
            T.CreatedDate AS EventTopic_CreatedDate, 
            T.CreatedBy AS EventTopic_CreatedBy, 
            T.UpdatedDate AS EventTopic_UpdatedDate, 
            T.UpdatedBy AS EventTopic_UpdatedBy, 
            T.MetaKeyword AS EventTopic_MetaKeyword, 
            T.MetaDescription AS EventTopic_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.EventTopic AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Parameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView76()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Parameter
        [CodeFirstDatabaseSchema.Parameter](T1.Parameter_ID, T1.Parameter_ParaName, T1.Parameter_isActive, T1.Parameter_CreatedDate, T1.Parameter_CreatedBy, T1.Parameter_UpdatedDate, T1.Parameter_UpdatedBy, T1.Parameter_MetaKeyword, T1.Parameter_MetaDescription)
    FROM (
        SELECT 
            T.ID AS Parameter_ID, 
            T.ParaName AS Parameter_ParaName, 
            T.isActive AS Parameter_isActive, 
            T.CreatedDate AS Parameter_CreatedDate, 
            T.CreatedBy AS Parameter_CreatedBy, 
            T.UpdatedDate AS Parameter_UpdatedDate, 
            T.UpdatedBy AS Parameter_UpdatedBy, 
            T.MetaKeyword AS Parameter_MetaKeyword, 
            T.MetaDescription AS Parameter_MetaDescription, 
            True AS _from0
        FROM MegaCinemaDBContext.Parameters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MegaCinemaDBContext.Parameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView77()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Parameters
        [MegaCinemaData.Parameter](T1.Parameter_ID, T1.Parameter_ParaName, T1.Parameter_isActive, T1.Parameter_CreatedDate, T1.Parameter_CreatedBy, T1.Parameter_UpdatedDate, T1.Parameter_UpdatedBy, T1.Parameter_MetaKeyword, T1.Parameter_MetaDescription)
    FROM (
        SELECT 
            T.ID AS Parameter_ID, 
            T.ParaName AS Parameter_ParaName, 
            T.isActive AS Parameter_isActive, 
            T.CreatedDate AS Parameter_CreatedDate, 
            T.CreatedBy AS Parameter_CreatedBy, 
            T.UpdatedDate AS Parameter_UpdatedDate, 
            T.UpdatedBy AS Parameter_UpdatedBy, 
            T.MetaKeyword AS Parameter_MetaKeyword, 
            T.MetaDescription AS Parameter_MetaDescription, 
            True AS _from0
        FROM CodeFirstDatabase.Parameter AS T
    ) AS T1");
        }
    }
}
